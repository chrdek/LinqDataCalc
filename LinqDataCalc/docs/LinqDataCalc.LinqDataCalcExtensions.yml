### YamlMime:ManagedReference
items:
- uid: LinqDataCalc.LinqDataCalcExtensions
  commentId: T:LinqDataCalc.LinqDataCalcExtensions
  id: LinqDataCalcExtensions
  parent: LinqDataCalc
  children:
  - LinqDataCalc.LinqDataCalcExtensions.AsNumberTuples(System.Collections.Generic.IEnumerable{System.Object})
  - LinqDataCalc.LinqDataCalcExtensions.BTreeGen(System.Double,System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.BTreeGen2(System.Int32,System.Double)
  - LinqDataCalc.LinqDataCalcExtensions.BTreeHeight(LinqDataCalc.LinqDataCalcExtensions.Node)
  - LinqDataCalc.LinqDataCalcExtensions.ChunkOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.CompareBytes(System.Byte[],System.Byte[])
  - LinqDataCalc.LinqDataCalcExtensions.DictionaryRndFill(System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Int32,System.Int32}},System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.DiffBytes(System.Byte[],System.Byte[])
  - LinqDataCalc.LinqDataCalcExtensions.ExpectedValue(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})
  - LinqDataCalc.LinqDataCalcExtensions.Factorial(System.Collections.Generic.IEnumerable{System.Int32})
  - LinqDataCalc.LinqDataCalcExtensions.FiboSeq(System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.FiboSeqGenerator(System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.GetRandomElements``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.HammingDist(System.String,System.String)
  - LinqDataCalc.LinqDataCalcExtensions.HammingDistAlgo(System.Int32,System.Int32,LinqDataCalc.LinqDataCalcExtensions.AlgoType)
  - LinqDataCalc.LinqDataCalcExtensions.HammingWeight(System.UInt32)
  - LinqDataCalc.LinqDataCalcExtensions.HammingWeight(System.UInt64)
  - LinqDataCalc.LinqDataCalcExtensions.HappySeq(System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.IEnumRndFill(System.Collections.Generic.IEnumerable{System.Int32},System.Object)
  - LinqDataCalc.LinqDataCalcExtensions.IterateAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.LetterCombinationsOf(System.String)
  - LinqDataCalc.LinqDataCalcExtensions.LevnDist(System.String,System.String)
  - LinqDataCalc.LinqDataCalcExtensions.LevnDistEditMatrix(System.String,System.String)
  - LinqDataCalc.LinqDataCalcExtensions.LevnDistRecur(System.String,System.String,System.Int32[0:,0:])
  - LinqDataCalc.LinqDataCalcExtensions.MatrixProduct(System.Int32[0:,0:],System.Int32[0:,0:])
  - LinqDataCalc.LinqDataCalcExtensions.MatrixProductv2(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose``1(``0[0:,0:])
  - LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose``1(``0[][])
  - LinqDataCalc.LinqDataCalcExtensions.MaxCollVals(System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}},System.Boolean)
  - LinqDataCalc.LinqDataCalcExtensions.MaxMatrixVal(System.Int32[0:,0:],System.Boolean)
  - LinqDataCalc.LinqDataCalcExtensions.MaxMultiDimVal(System.Int32[][],System.Boolean)
  - LinqDataCalc.LinqDataCalcExtensions.MedianValue(System.Collections.Generic.IEnumerable{System.Int32})
  - LinqDataCalc.LinqDataCalcExtensions.ModeValues(System.Collections.Generic.IEnumerable{System.Int32})
  - LinqDataCalc.LinqDataCalcExtensions.OddOrEven``1(System.Collections.Generic.IEnumerable{``0})
  - LinqDataCalc.LinqDataCalcExtensions.PowerOf(System.Int32,System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.ReorderElementsIterator``1(System.Collections.Generic.IEnumerable{``0},System.Random)
  - LinqDataCalc.LinqDataCalcExtensions.ReorderElements``1(System.Collections.Generic.IEnumerable{``0})
  - LinqDataCalc.LinqDataCalcExtensions.RndDoubleTuple(System.Collections.Generic.IEnumerable{System.Int32},System.Double)
  - LinqDataCalc.LinqDataCalcExtensions.RndIntTuple(System.Collections.Generic.IEnumerable{System.Int32})
  - LinqDataCalc.LinqDataCalcExtensions.SequenceEquals``1(``0[0:,0:],``0[0:,0:])
  - LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  - LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})
  - LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})
  - LinqDataCalc.LinqDataCalcExtensions.TenPowerOf(System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.ToDoublePowerOf(System.Collections.Generic.IEnumerable{System.Int32},System.Double)
  - LinqDataCalc.LinqDataCalcExtensions.ToIntMatrix(System.String,System.Int32[0:,0:])
  - LinqDataCalc.LinqDataCalcExtensions.ToIntPowerOf(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.VectorProduct(System.Int32[],System.Int32[])
  - LinqDataCalc.LinqDataCalcExtensions.add(System.Int32,System.Int32)
  - LinqDataCalc.LinqDataCalcExtensions.subtract(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: LinqDataCalcExtensions
  nameWithType: LinqDataCalcExtensions
  fullName: LinqDataCalc.LinqDataCalcExtensions
  type: Class
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: LinqDataCalcExtensions
    path: LinqDataCalc.cs
    startLine: 11
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Main LinqDataCalcExtensions Class implementation.
  example: []
  syntax:
    content: public static class LinqDataCalcExtensions
    content.vb: Public Module LinqDataCalcExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: LinqDataCalc.LinqDataCalcExtensions.ModeValues(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.ModeValues(System.Collections.Generic.IEnumerable{System.Int32})
  id: ModeValues(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: ModeValues(IEnumerable<int>)
  nameWithType: LinqDataCalcExtensions.ModeValues(IEnumerable<int>)
  fullName: LinqDataCalc.LinqDataCalcExtensions.ModeValues(System.Collections.Generic.IEnumerable<int>)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: ModeValues
    path: LinqDataCalc.cs
    startLine: 25
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Retrieve the mode values in a sequence of numbers.

    (The most frequently occuring number - ordered)
  example:
  - >-
    Get the top used values in an IEnumerable.

    <pre><code class="lang-csharp">int[] num_seq = { -990,-940,-770,-599,-543,-513,-482,-451,-445,-371,-240,-371,-940 };
        var num = num_seq.AsEnumerable();
        var result = num.ModeValues();</code></pre>
  syntax:
    content: public static IEnumerable<KeyValuePair<int, int>> ModeValues(this IEnumerable<int> elements)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: The numeric sequence used as input
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}}
      description: An IEnumerable KeyValuePair with Key=total per the mode value and Value=occuring value in the sequence.
    content.vb: Public Shared Function ModeValues(elements As IEnumerable(Of Integer)) As IEnumerable(Of KeyValuePair(Of Integer, Integer))
  overload: LinqDataCalc.LinqDataCalcExtensions.ModeValues*
  nameWithType.vb: LinqDataCalcExtensions.ModeValues(IEnumerable(Of Integer))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.ModeValues(System.Collections.Generic.IEnumerable(Of Integer))
  name.vb: ModeValues(IEnumerable(Of Integer))
- uid: LinqDataCalc.LinqDataCalcExtensions.MedianValue(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.MedianValue(System.Collections.Generic.IEnumerable{System.Int32})
  id: MedianValue(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: MedianValue(IEnumerable<int>)
  nameWithType: LinqDataCalcExtensions.MedianValue(IEnumerable<int>)
  fullName: LinqDataCalc.LinqDataCalcExtensions.MedianValue(System.Collections.Generic.IEnumerable<int>)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: MedianValue
    path: LinqDataCalc.cs
    startLine: 42
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Return the median value in an -ordered- numeric sequence.
  example:
  - >-
    Get the median value in an IEnumerable.

    <pre><code class="lang-csharp">int[] num_seq = { -990,-940,-770,-599,-543,-513,-482,-451,-445,-371,-240 };
        var num = num_seq.AsEnumerable();
        double result = num.MedianValue();</code></pre>
  syntax:
    content: public static double MedianValue(this IEnumerable<int> elements)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: The numeric sequence used as input
    return:
      type: System.Double
      description: Double median value for the selected sequence
    content.vb: Public Shared Function MedianValue(elements As IEnumerable(Of Integer)) As Double
  overload: LinqDataCalc.LinqDataCalcExtensions.MedianValue*
  nameWithType.vb: LinqDataCalcExtensions.MedianValue(IEnumerable(Of Integer))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.MedianValue(System.Collections.Generic.IEnumerable(Of Integer))
  name.vb: MedianValue(IEnumerable(Of Integer))
- uid: LinqDataCalc.LinqDataCalcExtensions.OddOrEven``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.OddOrEven``1(System.Collections.Generic.IEnumerable{``0})
  id: OddOrEven``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: OddOrEven<T>(IEnumerable<T>)
  nameWithType: LinqDataCalcExtensions.OddOrEven<T>(IEnumerable<T>)
  fullName: LinqDataCalc.LinqDataCalcExtensions.OddOrEven<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: OddOrEven
    path: LinqDataCalc.cs
    startLine: 58
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Checks whether the total length of a sequence is odd or even.
  example:
  - >-
    Check whether length of IEnumerable is odd or even.

    <pre><code class="lang-csharp">bool oddlen = new int[]{4,43,13,50,40}.OddOrEven();</code></pre>
  syntax:
    content: public static bool OddOrEven<T>(this IEnumerable<T> elements)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The data sequence to be checked
    typeParameters:
    - id: T
      description: Any kind of elements in a sequence
    return:
      type: System.Boolean
      description: True or False depending on the result
    content.vb: Public Shared Function OddOrEven(Of T)(elements As IEnumerable(Of T)) As Boolean
  overload: LinqDataCalc.LinqDataCalcExtensions.OddOrEven*
  nameWithType.vb: LinqDataCalcExtensions.OddOrEven(Of T)(IEnumerable(Of T))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.OddOrEven(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: OddOrEven(Of T)(IEnumerable(Of T))
- uid: LinqDataCalc.LinqDataCalcExtensions.CompareBytes(System.Byte[],System.Byte[])
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.CompareBytes(System.Byte[],System.Byte[])
  id: CompareBytes(System.Byte[],System.Byte[])
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: CompareBytes(byte[], byte[])
  nameWithType: LinqDataCalcExtensions.CompareBytes(byte[], byte[])
  fullName: LinqDataCalc.LinqDataCalcExtensions.CompareBytes(byte[], byte[])
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: CompareBytes
    path: LinqDataCalc.cs
    startLine: 76
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Compare the bytes in two 1-dimensional byte arrays.
  example:
  - >-
    Check whether two 1-dimensional byte arrays are equal.

    <pre><code class="lang-csharp">byte[] b1 = new byte[]{77,90,144,0,3,0,0,0,4,0,0,0,255,255,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,14,31,32,100};

    byte[] b2 = new byte[]{77,90,144,0,3,0,0,0,4,0,0,0,255,20,0,0,0,0,0,0,128,0,0,0,14,31,186,14,0,180,9,205,33,184,1,76,103,114};

    bool result = b1.CompareBytes(b2);</code></pre>
  syntax:
    content: public static bool CompareBytes(this byte[] larray, byte[] rarray)
    parameters:
    - id: larray
      type: System.Byte[]
      description: ''
    - id: rarray
      type: System.Byte[]
      description: ''
    return:
      type: System.Boolean
      description: True or False depending on the result
    content.vb: Public Shared Function CompareBytes(larray As Byte(), rarray As Byte()) As Boolean
  overload: LinqDataCalc.LinqDataCalcExtensions.CompareBytes*
  nameWithType.vb: LinqDataCalcExtensions.CompareBytes(Byte(), Byte())
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.CompareBytes(Byte(), Byte())
  name.vb: CompareBytes(Byte(), Byte())
- uid: LinqDataCalc.LinqDataCalcExtensions.DiffBytes(System.Byte[],System.Byte[])
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.DiffBytes(System.Byte[],System.Byte[])
  id: DiffBytes(System.Byte[],System.Byte[])
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: DiffBytes(byte[], byte[])
  nameWithType: LinqDataCalcExtensions.DiffBytes(byte[], byte[])
  fullName: LinqDataCalc.LinqDataCalcExtensions.DiffBytes(byte[], byte[])
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: DiffBytes
    path: LinqDataCalc.cs
    startLine: 94
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Checks two 1-dimensional byte arrays and returns a list of the positions where the bytes are different with the byte values.
  example:
  - >-
    Check two 1-dimensional byte arrays, and return a list of different bytes and the point of difference.

    <pre><code class="lang-csharp">byte[] b1 = new byte[]{77,90,144,0,3,0,0,0,4,0,0,0,255,255,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,14,31,32,100};

    byte[] b2 = new byte[]{77,90,144,0,3,0,0,0,4,0,0,0,255,20,0,0,0,0,0,0,128,0,0,0,14,31,186,14,0,180,9,205,33,184,1,76,103,114};

    var result = b1.DiffBytes(b2);</code></pre>
  syntax:
    content: public static IDictionary<int, int> DiffBytes(this byte[] mainarr, byte[] diffarr)
    parameters:
    - id: mainarr
      type: System.Byte[]
      description: The main byte array to be compared
    - id: diffarr
      type: System.Byte[]
      description: The secondary byte array to be compared against
    return:
      type: System.Collections.Generic.IDictionary{System.Int32,System.Int32}
      description: An Dictionary with the different bytes and the array positions that contains the difference against.
    content.vb: Public Shared Function DiffBytes(mainarr As Byte(), diffarr As Byte()) As IDictionary(Of Integer, Integer)
  overload: LinqDataCalc.LinqDataCalcExtensions.DiffBytes*
  nameWithType.vb: LinqDataCalcExtensions.DiffBytes(Byte(), Byte())
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.DiffBytes(Byte(), Byte())
  name.vb: DiffBytes(Byte(), Byte())
- uid: LinqDataCalc.LinqDataCalcExtensions.SequenceEquals``1(``0[0:,0:],``0[0:,0:])
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.SequenceEquals``1(``0[0:,0:],``0[0:,0:])
  id: SequenceEquals``1(``0[0:,0:],``0[0:,0:])
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: SequenceEquals<T>(T[,], T[,])
  nameWithType: LinqDataCalcExtensions.SequenceEquals<T>(T[,], T[,])
  fullName: LinqDataCalc.LinqDataCalcExtensions.SequenceEquals<T>(T[,], T[,])
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: SequenceEquals
    path: LinqDataCalc.cs
    startLine: 125
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Checks whether two 2-dimensional arrays of any element type are equal.
  example:
  - >-
    Check whether two 2-dimensinonal arrays of any type are equal.

    <pre><code class="lang-csharp">int[,] intArray1 = new int[4,4]{{432,31,32,43},{324,321,55,31},{110,34,543,13},{90,321,453,12}};
              int[,] intArray2 = new int[4,4]{{110,43,120,301},{54,312,321,91},{99,45,21,12},{9,32,45,152}};
              bool res = intArray1.SequenceEquals(intArray2);

              byte[,] barray1 = new byte[3,3]{{132,56,32},{30,45,10},{92,100,48}};
              byte[,] barray2 = new byte[3,3]{{132,56,32},{30,45,10},{92,100,48}};
              bool res = barray1.SequenceEquals(barray2);</code></pre>
  syntax:
    content: public static bool SequenceEquals<T>(this T[,] a, T[,] b)
    parameters:
    - id: a
      type: '{T}[,]'
      description: The first sequence to be compared
    - id: b
      type: '{T}[,]'
      description: The second sequence to be compared against the first
    typeParameters:
    - id: T
      description: Any kind of elements in a sequence
    return:
      type: System.Boolean
      description: True or False depending on the result
    content.vb: Public Shared Function SequenceEquals(Of T)(a As T(,), b As T(,)) As Boolean
  overload: LinqDataCalc.LinqDataCalcExtensions.SequenceEquals*
  nameWithType.vb: LinqDataCalcExtensions.SequenceEquals(Of T)(T(,), T(,))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.SequenceEquals(Of T)(T(,), T(,))
  name.vb: SequenceEquals(Of T)(T(,), T(,))
- uid: LinqDataCalc.LinqDataCalcExtensions.HammingWeight(System.UInt32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.HammingWeight(System.UInt32)
  id: HammingWeight(System.UInt32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: HammingWeight(uint)
  nameWithType: LinqDataCalcExtensions.HammingWeight(uint)
  fullName: LinqDataCalc.LinqDataCalcExtensions.HammingWeight(uint)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: HammingWeight
    path: LinqDataCalc.cs
    startLine: 143
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Hamming Weight Calculation for bit-depth of integers (UInt support of 32-bit integer values)

    Utilizes direct "bit manipulation, bit swapping" algorithm for hamming weight calculation.
  example:
  - >-
    Calculate the resulting hamming weight of an integer value.

    <pre><code class="lang-csharp">uint testVal = 0x10043091; //int values

    int result = testVal.HammingWeight();</code></pre>
  syntax:
    content: public static int HammingWeight(this uint in_x)
    parameters:
    - id: in_x
      type: System.UInt32
      description: The integer value to return the numerical weight for
    return:
      type: System.Int32
      description: The calculated integer value of hamming weight
    content.vb: Public Shared Function HammingWeight(in_x As UInteger) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.HammingWeight*
  nameWithType.vb: LinqDataCalcExtensions.HammingWeight(UInteger)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.HammingWeight(UInteger)
  name.vb: HammingWeight(UInteger)
- uid: LinqDataCalc.LinqDataCalcExtensions.HammingWeight(System.UInt64)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.HammingWeight(System.UInt64)
  id: HammingWeight(System.UInt64)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: HammingWeight(ulong)
  nameWithType: LinqDataCalcExtensions.HammingWeight(ulong)
  fullName: LinqDataCalc.LinqDataCalcExtensions.HammingWeight(ulong)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: HammingWeight
    path: LinqDataCalc.cs
    startLine: 173
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Hamming Weight Calculation for bit-depth of long integers (ULong support of 64-bit integer values)

    Utilizes direct "bit manipulation, bit swapping" algorithm for hamming weight calculation.
  example:
  - >-
    Calculate the resulting hamming weight of a long integer value.

    <pre><code class="lang-csharp">ulong testVal = 0x8891930311; //large int values

    int result = testVal.HammingWeight();</code></pre>
  syntax:
    content: public static int HammingWeight(this ulong in_x)
    parameters:
    - id: in_x
      type: System.UInt64
      description: The long integer value to return the numerical weight for
    return:
      type: System.Int32
      description: The calculated integer value of hamming weight
    content.vb: Public Shared Function HammingWeight(in_x As ULong) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.HammingWeight*
  nameWithType.vb: LinqDataCalcExtensions.HammingWeight(ULong)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.HammingWeight(ULong)
  name.vb: HammingWeight(ULong)
- uid: LinqDataCalc.LinqDataCalcExtensions.HammingDist(System.String,System.String)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.HammingDist(System.String,System.String)
  id: HammingDist(System.String,System.String)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: HammingDist(string, string)
  nameWithType: LinqDataCalcExtensions.HammingDist(string, string)
  fullName: LinqDataCalc.LinqDataCalcExtensions.HammingDist(string, string)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: HammingDist
    path: LinqDataCalc.cs
    startLine: 211
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Hamming distance calculation for comparing two strings of equal length

    Retrieves the different characters count in both strings
  example:
  - >-
    Retrieve a default value as result if strings are not equal or hamming comparison value.

    <pre><code class="lang-csharp">int res = "ABCDHFGF".HammingDist("ABCDEFO9"); //res equals to 3
       int res = "ABC".HammingDist("AAABBBCCCDD77"); //res equals to MaxInt
       int res = "A8udhhG".HammingDist("A8udhhG"); //res equals to 0
       int res = "A8udhhG".HammingDist("A8UDHHG"); //res equals to 4</code></pre>
  syntax:
    content: public static int HammingDist(this string leftStr, string rightStr)
    parameters:
    - id: leftStr
      type: System.String
      description: The left string part
    - id: rightStr
      type: System.String
      description: The right string part
    return:
      type: System.Int32
      description: >-
        Maximum integer value in case both strings are not equal in legth,
           Number of differences in both strings otherwise.
    content.vb: Public Shared Function HammingDist(leftStr As String, rightStr As String) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.HammingDist*
  nameWithType.vb: LinqDataCalcExtensions.HammingDist(String, String)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.HammingDist(String, String)
  name.vb: HammingDist(String, String)
- uid: LinqDataCalc.LinqDataCalcExtensions.HammingDistAlgo(System.Int32,System.Int32,LinqDataCalc.LinqDataCalcExtensions.AlgoType)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.HammingDistAlgo(System.Int32,System.Int32,LinqDataCalc.LinqDataCalcExtensions.AlgoType)
  id: HammingDistAlgo(System.Int32,System.Int32,LinqDataCalc.LinqDataCalcExtensions.AlgoType)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: HammingDistAlgo(int, int, AlgoType)
  nameWithType: LinqDataCalcExtensions.HammingDistAlgo(int, int, LinqDataCalcExtensions.AlgoType)
  fullName: LinqDataCalc.LinqDataCalcExtensions.HammingDistAlgo(int, int, LinqDataCalc.LinqDataCalcExtensions.AlgoType)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: HammingDistAlgo
    path: LinqDataCalc.cs
    startLine: 257
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Hamming Distance calculation between two integer numbers

    using different algorithm variants, multiple algo. selections.

    (Calculated bit-level differences between numerical values)
  example:
  - >-
    Calculating the hamming distance between two integers

    by using different methods.

    <pre><code class="lang-csharp">int res = (-995).HammingDistAlgo((-48),LinqDataCalcExtensions.AlgoType.DistXOR1);
        int res = (-995).HammingDistAlgo((-48),LinqDataCalcExtensions.AlgoType.DistXOR2);
        int res = (-995).HammingDistAlgo((-48),LinqDataCalcExtensions.AlgoType.DistLoop);
        //Result in all cases above = 7</code></pre>
  syntax:
    content: public static int HammingDistAlgo(this int leftNum, int rightNum, LinqDataCalcExtensions.AlgoType hamming_alg)
    parameters:
    - id: leftNum
      type: System.Int32
      description: The leftmost number to compare with
    - id: rightNum
      type: System.Int32
      description: The rightmost number to be compared with
    - id: hamming_alg
      type: LinqDataCalc.LinqDataCalcExtensions.AlgoType
      description: >-
        The hamming distance algorithm selection
            Can only use: AlgoType.DistLoop, AlgoType.DistXOR1, AlgoType.DistXOR2
            for setting appropriate variant to use.
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function HammingDistAlgo(leftNum As Integer, rightNum As Integer, hamming_alg As LinqDataCalcExtensions.AlgoType) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.HammingDistAlgo*
  nameWithType.vb: LinqDataCalcExtensions.HammingDistAlgo(Integer, Integer, LinqDataCalcExtensions.AlgoType)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.HammingDistAlgo(Integer, Integer, LinqDataCalc.LinqDataCalcExtensions.AlgoType)
  name.vb: HammingDistAlgo(Integer, Integer, AlgoType)
- uid: LinqDataCalc.LinqDataCalcExtensions.LevnDist(System.String,System.String)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.LevnDist(System.String,System.String)
  id: LevnDist(System.String,System.String)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: LevnDist(string, string)
  nameWithType: LinqDataCalcExtensions.LevnDist(string, string)
  fullName: LinqDataCalc.LinqDataCalcExtensions.LevnDist(string, string)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: LevnDist
    path: LinqDataCalc.cs
    startLine: 327
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Levenshtein distance for two input strings and edit differences for those.

    (Can be applied between two strings of equal or differing length in size)
  example:
  - >-
    Calculate the levenshtein distance between strings left, right.

    <pre><code class="lang-csharp">int result = "Paints".LevnDist("ants"); //result = 2
        int result = "Compute".LevnDist("Confuse"); // result  = 3</code></pre>
  syntax:
    content: public static int LevnDist(this string strLeft, string strRight)
    parameters:
    - id: strLeft
      type: System.String
      description: The leftmost string to find edit diffs from
    - id: strRight
      type: System.String
      description: The rightmost string to compare edit diffs with
    return:
      type: System.Int32
      description: Calculated sum or edit distance per input set of strings as integer.
    content.vb: Public Shared Function LevnDist(strLeft As String, strRight As String) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.LevnDist*
  nameWithType.vb: LinqDataCalcExtensions.LevnDist(String, String)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.LevnDist(String, String)
  name.vb: LevnDist(String, String)
- uid: LinqDataCalc.LinqDataCalcExtensions.LevnDistRecur(System.String,System.String,System.Int32[0:,0:])
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.LevnDistRecur(System.String,System.String,System.Int32[0:,0:])
  id: LevnDistRecur(System.String,System.String,System.Int32[0:,0:])
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: LevnDistRecur(string, string, int[,])
  nameWithType: LinqDataCalcExtensions.LevnDistRecur(string, string, int[,])
  fullName: LinqDataCalc.LinqDataCalcExtensions.LevnDistRecur(string, string, int[,])
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: LevnDistRecur
    path: LinqDataCalc.cs
    startLine: 379
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    A recursive Levenstein implementation utilizing memoized cache for faster execution time.

    (Can be applied between two strings of equal or differing length in size)
  example:
  - " Calculate the levenshtein distance between strings left, right.\r\n<pre><code class=\"lang-csharp\">int result = \"test2\".LevnDistRecur(\"arst22\",new int[(\"test2\".Length)+1,(\"arst22\".Length)+1]); // result = 3\r\n    int result = \"Sam\".LevnDistRecur(\"Samantha\",new int[(\"Sam\".Length)+1,(\"Samantha\".Length)+1]); // result = 5</code></pre>"
  syntax:
    content: public static int LevnDistRecur(this string leftStrIn, string rightStrIn, int[,] memo)
    parameters:
    - id: leftStrIn
      type: System.String
      description: The leftmost string to find edit diffs from
    - id: rightStrIn
      type: System.String
      description: The rightmost string to compare edit diffs with
    - id: memo
      type: System.Int32[,]
      description: >-
        The matrix to store the intermediary distance cost results in
            Note: Needs to be the same size as NxM such that N = length of leftStrIn, M = length of rightStrIn
    return:
      type: System.Int32
      description: Calculated sum or edit distance per input set of strings as integer.
    content.vb: Public Shared Function LevnDistRecur(leftStrIn As String, rightStrIn As String, memo As Integer(,)) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.LevnDistRecur*
  nameWithType.vb: LinqDataCalcExtensions.LevnDistRecur(String, String, Integer(,))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.LevnDistRecur(String, String, Integer(,))
  name.vb: LevnDistRecur(String, String, Integer(,))
- uid: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})
  id: StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: StandardDeviation(IEnumerable<int>)
  nameWithType: LinqDataCalcExtensions.StandardDeviation(IEnumerable<int>)
  fullName: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable<int>)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: StandardDeviation
    path: LinqDataCalc.cs
    startLine: 420
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Calculates the standard deviation value of integer numeric sequence.
  example:
  - >-
    Calculates STDEVP().

    <pre><code class="lang-csharp">double result = new int[]{10,23,13,50,4}.StandardDeviation();</code></pre>
  syntax:
    content: public static double StandardDeviation(this IEnumerable<int> values)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: The numeric sequence used as input
    return:
      type: System.Double
      description: Standard deviation double result
    content.vb: Public Shared Function StandardDeviation(values As IEnumerable(Of Integer)) As Double
  overload: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation*
  nameWithType.vb: LinqDataCalcExtensions.StandardDeviation(IEnumerable(Of Integer))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable(Of Integer))
  name.vb: StandardDeviation(IEnumerable(Of Integer))
- uid: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})
  id: StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: StandardDeviation(IEnumerable<long>)
  nameWithType: LinqDataCalcExtensions.StandardDeviation(IEnumerable<long>)
  fullName: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable<long>)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: StandardDeviation
    path: LinqDataCalc.cs
    startLine: 434
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Calculates the standard deviation value of large integer numeric sequence.
  example:
  - >-
    Calculates STDEVP() for doubles.

    <pre><code class="lang-csharp">double result = new double[]{0.1124,2.311,4.11,2.94,5.51).StandardDeviation();</code></pre>
  syntax:
    content: public static double StandardDeviation(this IEnumerable<long> values)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: The numeric sequence used as input
    return:
      type: System.Double
      description: Standard deviation double result
    content.vb: Public Shared Function StandardDeviation(values As IEnumerable(Of Long)) As Double
  overload: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation*
  nameWithType.vb: LinqDataCalcExtensions.StandardDeviation(IEnumerable(Of Long))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable(Of Long))
  name.vb: StandardDeviation(IEnumerable(Of Long))
- uid: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  id: StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: StandardDeviation(IEnumerable<double>)
  nameWithType: LinqDataCalcExtensions.StandardDeviation(IEnumerable<double>)
  fullName: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable<double>)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: StandardDeviation
    path: LinqDataCalc.cs
    startLine: 448
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Calculates the standard deviation value of double numeric sequence.
  example:
  - >-
    Calculates STDEVP() for long.

    <pre><code class="lang-csharp">double result = new long[]{394392,93993,323993,49240,49329}.StandardDeviation();</code></pre>
  syntax:
    content: public static double StandardDeviation(this IEnumerable<double> values)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The numeric sequence used as input
    return:
      type: System.Double
      description: Standard deviation double result
    content.vb: Public Shared Function StandardDeviation(values As IEnumerable(Of Double)) As Double
  overload: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation*
  nameWithType.vb: LinqDataCalcExtensions.StandardDeviation(IEnumerable(Of Double))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable(Of Double))
  name.vb: StandardDeviation(IEnumerable(Of Double))
- uid: LinqDataCalc.LinqDataCalcExtensions.ExpectedValue(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.ExpectedValue(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})
  id: ExpectedValue(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: ExpectedValue(IEnumerable<double>, IEnumerable<double>)
  nameWithType: LinqDataCalcExtensions.ExpectedValue(IEnumerable<double>, IEnumerable<double>)
  fullName: LinqDataCalc.LinqDataCalcExtensions.ExpectedValue(System.Collections.Generic.IEnumerable<double>, System.Collections.Generic.IEnumerable<double>)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: ExpectedValue
    path: LinqDataCalc.cs
    startLine: 464
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Based on a number list of probability values and a secondary list of possible expected outcomes of that probability,

    retrieve the overall expected value of the frequency of occurence on the inital observation/event.
  example:
  - >-
    Calculates Expected value of two probability sequences.

    <pre><code class="lang-csharp">double expected = new double[]{1,2,3,4,5,6,7,8}.ExpectedValue(Enumerable.Repeat(0.125,8));</code></pre>
  syntax:
    content: public static double ExpectedValue(this IEnumerable<double> probabilities, IEnumerable<double> outcomes)
    parameters:
    - id: probabilities
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: List of probability values
    - id: outcomes
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: List of expected outcome values
    return:
      type: System.Double
      description: The expected outcome/frequency of occurence value
    content.vb: Public Shared Function ExpectedValue(probabilities As IEnumerable(Of Double), outcomes As IEnumerable(Of Double)) As Double
  overload: LinqDataCalc.LinqDataCalcExtensions.ExpectedValue*
  nameWithType.vb: LinqDataCalcExtensions.ExpectedValue(IEnumerable(Of Double), IEnumerable(Of Double))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.ExpectedValue(System.Collections.Generic.IEnumerable(Of Double), System.Collections.Generic.IEnumerable(Of Double))
  name.vb: ExpectedValue(IEnumerable(Of Double), IEnumerable(Of Double))
- uid: LinqDataCalc.LinqDataCalcExtensions.FiboSeq(System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.FiboSeq(System.Int32)
  id: FiboSeq(System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: FiboSeq(int)
  nameWithType: LinqDataCalcExtensions.FiboSeq(int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.FiboSeq(int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: FiboSeq
    path: LinqDataCalc.cs
    startLine: 480
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Fibonacci sequence for a given number as input.
  example:
  - >-
    Get the resulting numeric fibonacci sequence.

    <pre><code class="lang-csharp">var seq_out = 10.FiboSeq();

    var seq_out = 100.FiboSeq();</code></pre>
  syntax:
    content: public static IEnumerable<ulong> FiboSeq(this int numLimit)
    parameters:
    - id: numLimit
      type: System.Int32
      description: The max number that fibonacci seq. gets generated for
    return:
      type: System.Collections.Generic.IEnumerable{System.UInt64}
      description: An IEnumerable with fibonacci numbers.
    content.vb: Public Shared Function FiboSeq(numLimit As Integer) As IEnumerable(Of ULong)
  overload: LinqDataCalc.LinqDataCalcExtensions.FiboSeq*
  nameWithType.vb: LinqDataCalcExtensions.FiboSeq(Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.FiboSeq(Integer)
  name.vb: FiboSeq(Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.HappySeq(System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.HappySeq(System.Int32)
  id: HappySeq(System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: HappySeq(int)
  nameWithType: LinqDataCalcExtensions.HappySeq(int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.HappySeq(int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: HappySeq
    path: LinqDataCalc.cs
    startLine: 505
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    For a provided maximum value, generate

    happy numbers sequence up to that value.
  example:
  - >-
    Get the integers in a sequence that produce a happy sum.

    <pre><code class="lang-csharp">var list_out = 150.HappySeq();

    var list_out = 10.HappySeq();

    var list_out = 0.HappySeq(); //list_out Length = 0

    var list_out = 1.HappySeq(); //list_out Length = 1 (value = 1)</code></pre>
  syntax:
    content: public static IEnumerable<int> HappySeq(this int endLimit)
    parameters:
    - id: endLimit
      type: System.Int32
      description: The numeric sequence upper limit to generate the happy numbers for
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: A list of integer numbers.
    content.vb: Public Shared Function HappySeq(endLimit As Integer) As IEnumerable(Of Integer)
  overload: LinqDataCalc.LinqDataCalcExtensions.HappySeq*
  nameWithType.vb: LinqDataCalcExtensions.HappySeq(Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.HappySeq(Integer)
  name.vb: HappySeq(Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.FiboSeqGenerator(System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.FiboSeqGenerator(System.Int32)
  id: FiboSeqGenerator(System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: FiboSeqGenerator(int)
  nameWithType: LinqDataCalcExtensions.FiboSeqGenerator(int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.FiboSeqGenerator(int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: FiboSeqGenerator
    path: LinqDataCalc.cs
    startLine: 552
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Fibonacci sequence yield utilizing generator functions.
  example:
  - >-
    Get the resulting numeric fibonacci sequence.

    <pre><code class="lang-csharp">var seq_out = 10.FiboSeqGenerator();

    var seq_out = 100.FiboSeqGenerator();</code></pre>
  syntax:
    content: public static IEnumerable<ulong> FiboSeqGenerator(this int num)
    parameters:
    - id: num
      type: System.Int32
      description: The max number that fibonacci seq. gets generated for
    return:
      type: System.Collections.Generic.IEnumerable{System.UInt64}
      description: An IEnumerable with large fibonacci numbers.
    content.vb: Public Shared Function FiboSeqGenerator(num As Integer) As IEnumerable(Of ULong)
  overload: LinqDataCalc.LinqDataCalcExtensions.FiboSeqGenerator*
  nameWithType.vb: LinqDataCalcExtensions.FiboSeqGenerator(Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.FiboSeqGenerator(Integer)
  name.vb: FiboSeqGenerator(Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.Factorial(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.Factorial(System.Collections.Generic.IEnumerable{System.Int32})
  id: Factorial(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: Factorial(IEnumerable<int>)
  nameWithType: LinqDataCalcExtensions.Factorial(IEnumerable<int>)
  fullName: LinqDataCalc.LinqDataCalcExtensions.Factorial(System.Collections.Generic.IEnumerable<int>)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: Factorial
    path: LinqDataCalc.cs
    startLine: 575
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Calculates the factorial of any given value, from a provided range of values.
  example:
  - >-
    Calculates Factorial values for an IEnumerable.

    <pre><code class="lang-csharp">var result = Enumerable.Range(1,10).Factorial();</code></pre>
  syntax:
    content: public static IEnumerable<int> Factorial(this IEnumerable<int> values)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: List of input values
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: The list of factorials based on their original values
    content.vb: Public Shared Function Factorial(values As IEnumerable(Of Integer)) As IEnumerable(Of Integer)
  overload: LinqDataCalc.LinqDataCalcExtensions.Factorial*
  nameWithType.vb: LinqDataCalcExtensions.Factorial(IEnumerable(Of Integer))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.Factorial(System.Collections.Generic.IEnumerable(Of Integer))
  name.vb: Factorial(IEnumerable(Of Integer))
- uid: LinqDataCalc.LinqDataCalcExtensions.add(System.Int32,System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.add(System.Int32,System.Int32)
  id: add(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: add(int, int)
  nameWithType: LinqDataCalcExtensions.add(int, int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.add(int, int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: add
    path: LinqDataCalc.cs
    startLine: 601
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Binary addition of two integer numbers incl. carry digits.

    (negative or positive integer numerical values only)
  example:
  - >-
    Retrieve the result of adding integer y to underlying value x or vice-versa.

    <pre><code class="lang-csharp">int result1 = 100.add(93);

    int result2 = -90.add(54);</code></pre>
  syntax:
    content: public static int add(this int from_x, int add_y)
    parameters:
    - id: from_x
      type: System.Int32
      description: Numerical value x to perform the addition to
    - id: add_y
      type: System.Int32
      description: Numerical value y to use in addition operation
    return:
      type: System.Int32
      description: The integer result of the addition operation
    content.vb: Public Shared Function add(from_x As Integer, add_y As Integer) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.add*
  nameWithType.vb: LinqDataCalcExtensions.add(Integer, Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.add(Integer, Integer)
  name.vb: add(Integer, Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.subtract(System.Int32,System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.subtract(System.Int32,System.Int32)
  id: subtract(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: subtract(int, int)
  nameWithType: LinqDataCalcExtensions.subtract(int, int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.subtract(int, int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: subtract
    path: LinqDataCalc.cs
    startLine: 641
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Binary subtraction of two integer numbers incl. carry digits.

    (negative or positive integer numerical values only)
  example:
  - >-
    Retrieve the result of subtracting integer y from underlying value x or vice-versa.

    <pre><code class="lang-csharp">int result = -483.subtract(53);

    int result = -483.subtract(403);</code></pre>
  syntax:
    content: public static int subtract(this int from_x, int sub_y)
    parameters:
    - id: from_x
      type: System.Int32
      description: Numerical value x to perform the subtraction from
    - id: sub_y
      type: System.Int32
      description: Numerical value y to use in subtraction operation
    return:
      type: System.Int32
      description: The integer result of the subtraction operation
    content.vb: Public Shared Function subtract(from_x As Integer, sub_y As Integer) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.subtract*
  nameWithType.vb: LinqDataCalcExtensions.subtract(Integer, Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.subtract(Integer, Integer)
  name.vb: subtract(Integer, Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.PowerOf(System.Int32,System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.PowerOf(System.Int32,System.Int32)
  id: PowerOf(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: PowerOf(int, int)
  nameWithType: LinqDataCalcExtensions.PowerOf(int, int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.PowerOf(int, int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: PowerOf
    path: LinqDataCalc.cs
    startLine: 677
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Raises a number to the Nth power recursively.
  example:
  - >-
    Calculates Nth power of an integer.

    <pre><code class="lang-csharp">int result = new int[]{4,43,13,50,40}.Select(n=&gt;n.PowerOf(3));</code></pre>
  syntax:
    content: public static int PowerOf(this int value, int powBy)
    parameters:
    - id: value
      type: System.Int32
      description: The integer to raise to the Nth power
    - id: powBy
      type: System.Int32
      description: The Nth power value
    return:
      type: System.Int32
      description: Result of the power of a number
    content.vb: Public Shared Function PowerOf(value As Integer, powBy As Integer) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.PowerOf*
  nameWithType.vb: LinqDataCalcExtensions.PowerOf(Integer, Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.PowerOf(Integer, Integer)
  name.vb: PowerOf(Integer, Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.ToIntPowerOf(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.ToIntPowerOf(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)
  id: ToIntPowerOf(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: ToIntPowerOf(IEnumerable<int>, int)
  nameWithType: LinqDataCalcExtensions.ToIntPowerOf(IEnumerable<int>, int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.ToIntPowerOf(System.Collections.Generic.IEnumerable<int>, int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: ToIntPowerOf
    path: LinqDataCalc.cs
    startLine: 695
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Raises each number in a sequence to the Nth power.
  example:
  - >-
    Calculates Nth power of all integers in IEnumerable.

    <pre><code class="lang-csharp">int[] num_seq = { -990,-940,-770,-599,-543,-513,-482,-451,-445,-371,-240,-371,-940 };

    var num = num_seq.AsEnumerable();

    var result = num.ToIntPowerOf(3);</code></pre>
  syntax:
    content: public static IEnumerable<long> ToIntPowerOf(this IEnumerable<int> values, int val)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: The list of integers to be raised to the Nth power
    - id: val
      type: System.Int32
      description: The Nth power value
    return:
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: Resulting list of large integers raised to the Nth power
    content.vb: Public Shared Function ToIntPowerOf(values As IEnumerable(Of Integer), val As Integer) As IEnumerable(Of Long)
  overload: LinqDataCalc.LinqDataCalcExtensions.ToIntPowerOf*
  nameWithType.vb: LinqDataCalcExtensions.ToIntPowerOf(IEnumerable(Of Integer), Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.ToIntPowerOf(System.Collections.Generic.IEnumerable(Of Integer), Integer)
  name.vb: ToIntPowerOf(IEnumerable(Of Integer), Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.ToDoublePowerOf(System.Collections.Generic.IEnumerable{System.Int32},System.Double)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.ToDoublePowerOf(System.Collections.Generic.IEnumerable{System.Int32},System.Double)
  id: ToDoublePowerOf(System.Collections.Generic.IEnumerable{System.Int32},System.Double)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: ToDoublePowerOf(IEnumerable<int>, double)
  nameWithType: LinqDataCalcExtensions.ToDoublePowerOf(IEnumerable<int>, double)
  fullName: LinqDataCalc.LinqDataCalcExtensions.ToDoublePowerOf(System.Collections.Generic.IEnumerable<int>, double)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: ToDoublePowerOf
    path: LinqDataCalc.cs
    startLine: 717
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Raises each number in a sequence to the Nth power(where N is double).
  example:
  - >-
    Calculates Nth double power of all integers in IEnumerable.

    <pre><code class="lang-csharp">int[] num_seq = { -990,-940,-770,-599,-543,-513,-482,-451,-445,-371,-240,-371,-940 };

    var num = num_seq.AsEnumerable();

    var result = num.ToDoublePowerOff(2.71);</code></pre>
  syntax:
    content: public static IEnumerable<double> ToDoublePowerOf(this IEnumerable<int> values, double val)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: The list of integers to be raised to the Nth double power
    - id: val
      type: System.Double
      description: The Nth power double value
    return:
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: Resulting list of double values raised to the Nth power
    content.vb: Public Shared Function ToDoublePowerOf(values As IEnumerable(Of Integer), val As Double) As IEnumerable(Of Double)
  overload: LinqDataCalc.LinqDataCalcExtensions.ToDoublePowerOf*
  nameWithType.vb: LinqDataCalcExtensions.ToDoublePowerOf(IEnumerable(Of Integer), Double)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.ToDoublePowerOf(System.Collections.Generic.IEnumerable(Of Integer), Double)
  name.vb: ToDoublePowerOf(IEnumerable(Of Integer), Double)
- uid: LinqDataCalc.LinqDataCalcExtensions.TenPowerOf(System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.TenPowerOf(System.Int32)
  id: TenPowerOf(System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: TenPowerOf(int)
  nameWithType: LinqDataCalcExtensions.TenPowerOf(int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.TenPowerOf(int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: TenPowerOf
    path: LinqDataCalc.cs
    startLine: 735
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Returns the value of 10 raised to the power of N value.
  remarks: The function will not output negative values
  example:
  - >-
    Calculates Nth power of number 10.

    <pre><code class="lang-csharp">long tenthousand = (4).TenPowerOf();</code></pre>
  syntax:
    content: public static object TenPowerOf(this int powOf)
    parameters:
    - id: powOf
      type: System.Int32
      description: The Nth power value
    return:
      type: System.Object
      description: Result of the 10 in the power of N (can be float,int,ulong)
    content.vb: Public Shared Function TenPowerOf(powOf As Integer) As Object
  overload: LinqDataCalc.LinqDataCalcExtensions.TenPowerOf*
  nameWithType.vb: LinqDataCalcExtensions.TenPowerOf(Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.TenPowerOf(Integer)
  name.vb: TenPowerOf(Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.IterateAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.IterateAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: IterateAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: IterateAt<T>(IEnumerable<T>, int)
  nameWithType: LinqDataCalcExtensions.IterateAt<T>(IEnumerable<T>, int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.IterateAt<T>(System.Collections.Generic.IEnumerable<T>, int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: IterateAt
    path: LinqDataCalc.cs
    startLine: 760
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Retrieves a range of values from a list iteratively as a nested list.

    Element list at index 1 at indexes 1,2 at 1,2,3 up to N.
  example:
  - >-
    Get the Nth iteration of an IEnumerable in nested form.        

    <pre><code class="lang-csharp">int[] num_seq = { -990,-940,-770,-599,-543,-513,-482,-451,-445,-371,-240,-371,-940 };

    var num = num_seq.AsEnumerable();

    var result = num.IterateAt(4);</code></pre>
  syntax:
    content: public static IEnumerable<IEnumerable<T>> IterateAt<T>(this IEnumerable<T> elements, int size)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{{T}}
      description: List of elements used as input
    - id: size
      type: System.Int32
      description: Number of max iterations that lists are retrieved
    typeParameters:
    - id: T
      description: Any type of elements in the list
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: A nested enumerable list that has a maximum length defined by -size- parameter
    content.vb: Public Shared Function IterateAt(Of T)(elements As IEnumerable(Of T), size As Integer) As IEnumerable(Of IEnumerable(Of T))
  overload: LinqDataCalc.LinqDataCalcExtensions.IterateAt*
  nameWithType.vb: LinqDataCalcExtensions.IterateAt(Of T)(IEnumerable(Of T), Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.IterateAt(Of T)(System.Collections.Generic.IEnumerable(Of T), Integer)
  name.vb: IterateAt(Of T)(IEnumerable(Of T), Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.ChunkOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.ChunkOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: ChunkOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: ChunkOf<T>(IEnumerable<T>, int)
  nameWithType: LinqDataCalcExtensions.ChunkOf<T>(IEnumerable<T>, int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.ChunkOf<T>(System.Collections.Generic.IEnumerable<T>, int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: ChunkOf
    path: LinqDataCalc.cs
    startLine: 784
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Retrieves chunks of size N from a list as a nested list.
  example:
  - >-
    Split an IEnumerable into chunks of Length N.

    <pre><code class="lang-csharp">int[] num_seq = { -990,-940,-770,-599,-543,-513,-482,-451,-445,-371,-240,-371,-940 };

    var num = num_seq.AsEnumerable();

    var result = num.ChunkOf(3);</code></pre>
  syntax:
    content: public static IEnumerable<IEnumerable<T>> ChunkOf<T>(this IEnumerable<T> elements, int len)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{{T}}
      description: List of elements used as input
    - id: len
      type: System.Int32
      description: Length of N - chunks that the elements list is to be splitted into
    typeParameters:
    - id: T
      description: Any type of elements in the list
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: A nested enumerable list of which sub lists are chunks of equal length
    content.vb: Public Shared Function ChunkOf(Of T)(elements As IEnumerable(Of T), len As Integer) As IEnumerable(Of IEnumerable(Of T))
  overload: LinqDataCalc.LinqDataCalcExtensions.ChunkOf*
  nameWithType.vb: LinqDataCalcExtensions.ChunkOf(Of T)(IEnumerable(Of T), Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.ChunkOf(Of T)(System.Collections.Generic.IEnumerable(Of T), Integer)
  name.vb: ChunkOf(Of T)(IEnumerable(Of T), Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.BTreeGen(System.Double,System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.BTreeGen(System.Double,System.Int32)
  id: BTreeGen(System.Double,System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: BTreeGen(double, int)
  nameWithType: LinqDataCalcExtensions.BTreeGen(double, int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.BTreeGen(double, int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: BTreeGen
    path: LinqDataCalc.cs
    startLine: 832
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Generate a binary tree of random height, based on a prespecified complexity

    factor value (needs to be of double data type).
  example:
  - >-
    Generate a binary tree of specified depth N with random nodes density.

    <pre><code class="lang-csharp">var tree_root = 0.543.BTreeGen(6);</code></pre>
  syntax:
    content: public static LinqDataCalcExtensions.Node BTreeGen(this double nodeDensity, int depth)
    parameters:
    - id: nodeDensity
      type: System.Double
      description: The density factor of which to generate the random tree nodes with
    - id: depth
      type: System.Int32
      description: The b-tree depth for which to determine the height with
    return:
      type: LinqDataCalc.LinqDataCalcExtensions.Node
      description: A randomly generated b-tree root with leaf nodes that consist of Node data type
    content.vb: Public Shared Function BTreeGen(nodeDensity As Double, depth As Integer) As LinqDataCalcExtensions.Node
  overload: LinqDataCalc.LinqDataCalcExtensions.BTreeGen*
  nameWithType.vb: LinqDataCalcExtensions.BTreeGen(Double, Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.BTreeGen(Double, Integer)
  name.vb: BTreeGen(Double, Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.BTreeGen2(System.Int32,System.Double)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.BTreeGen2(System.Int32,System.Double)
  id: BTreeGen2(System.Int32,System.Double)
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: BTreeGen2(int, double)
  nameWithType: LinqDataCalcExtensions.BTreeGen2(int, double)
  fullName: LinqDataCalc.LinqDataCalcExtensions.BTreeGen2(int, double)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: BTreeGen2
    path: LinqDataCalc.cs
    startLine: 862
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Generate a range of binary trees of random height, based on a prespecified complexity

    factor value (needs to be of double data type) and yields an enumerable based on those b-trees.
  example:
  - >-
    Generate a binary tree range of specified depth N with random nodes density.

    <pre><code class="lang-csharp">var ienum_tree_roots = LinqDataCalcExtensions.BTreeGen2(3,0.75);</code></pre>
  syntax:
    content: public static IEnumerable<LinqDataCalcExtensions.Node> BTreeGen2(int depth, double nodeDensity)
    parameters:
    - id: depth
      type: System.Int32
      description: The b-tree depth for which to determine the height with
    - id: nodeDensity
      type: System.Double
      description: The density factor of which to generate the random tree nodes with
    return:
      type: System.Collections.Generic.IEnumerable{LinqDataCalc.LinqDataCalcExtensions.Node}
      description: An IEnumerable of multiple b-tree roots with random leaf nodes that consist of Node data type
    content.vb: Public Shared Function BTreeGen2(depth As Integer, nodeDensity As Double) As IEnumerable(Of LinqDataCalcExtensions.Node)
  overload: LinqDataCalc.LinqDataCalcExtensions.BTreeGen2*
  nameWithType.vb: LinqDataCalcExtensions.BTreeGen2(Integer, Double)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.BTreeGen2(Integer, Double)
  name.vb: BTreeGen2(Integer, Double)
- uid: LinqDataCalc.LinqDataCalcExtensions.BTreeHeight(LinqDataCalc.LinqDataCalcExtensions.Node)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.BTreeHeight(LinqDataCalc.LinqDataCalcExtensions.Node)
  id: BTreeHeight(LinqDataCalc.LinqDataCalcExtensions.Node)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: BTreeHeight(Node)
  nameWithType: LinqDataCalcExtensions.BTreeHeight(LinqDataCalcExtensions.Node)
  fullName: LinqDataCalc.LinqDataCalcExtensions.BTreeHeight(LinqDataCalc.LinqDataCalcExtensions.Node)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: BTreeHeight
    path: LinqDataCalc.cs
    startLine: 897
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Calculation of a b-tree total height counting edges from 

    the root node, to the end of the leafs of the data structure.

    (Utilizes queuing on adding/removing nodes for height calculation)
  example:
  - >-
    Calculate the b-tree height from the root node to outer leafs.

    <pre><code class="lang-csharp">var tree_root = 0.543.BTreeGen(6); //creates a root b-tree of size 6

    LinqDataCalcExtensions.BTreeHeight(tree_root); // result of total height 5</code></pre>
  syntax:
    content: public static int BTreeHeight(this LinqDataCalcExtensions.Node input)
    parameters:
    - id: input
      type: LinqDataCalc.LinqDataCalcExtensions.Node
      description: The root node of the b-tree of which to calculate the height from.
    return:
      type: System.Int32
      description: Calculated b-tree data structure height (root node = start).
    content.vb: Public Shared Function BTreeHeight(input As LinqDataCalcExtensions.Node) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.BTreeHeight*
- uid: LinqDataCalc.LinqDataCalcExtensions.IEnumRndFill(System.Collections.Generic.IEnumerable{System.Int32},System.Object)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.IEnumRndFill(System.Collections.Generic.IEnumerable{System.Int32},System.Object)
  id: IEnumRndFill(System.Collections.Generic.IEnumerable{System.Int32},System.Object)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: IEnumRndFill(IEnumerable<int>, object)
  nameWithType: LinqDataCalcExtensions.IEnumRndFill(IEnumerable<int>, object)
  fullName: LinqDataCalc.LinqDataCalcExtensions.IEnumRndFill(System.Collections.Generic.IEnumerable<int>, object)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: IEnumRndFill
    path: LinqDataCalc.cs
    startLine: 944
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Retrieve a list with random integer or decimal numbers depending on input provided.
  example:
  - >-
    Get an IEnumerable filled with random integer/double values.

    <pre><code class="lang-csharp">var resultInt = Enumerable.Repeat(0,10).IEnumRndFill(5); // fills with  random integers

    var resultDouble = Enumerable.Repeat(0,10).IEnumRndFill(1.5); // fills with random doubles</code></pre>
  syntax:
    content: public static IEnumerable<object> IEnumRndFill(this IEnumerable<int> retIntSeq, object number)
    parameters:
    - id: retIntSeq
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: The list used as input
    - id: number
      type: System.Object
      description: A numeric value, decimal or integer
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: A list of random values
    content.vb: Public Shared Function IEnumRndFill(retIntSeq As IEnumerable(Of Integer), number As Object) As IEnumerable(Of Object)
  overload: LinqDataCalc.LinqDataCalcExtensions.IEnumRndFill*
  nameWithType.vb: LinqDataCalcExtensions.IEnumRndFill(IEnumerable(Of Integer), Object)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.IEnumRndFill(System.Collections.Generic.IEnumerable(Of Integer), Object)
  name.vb: IEnumRndFill(IEnumerable(Of Integer), Object)
- uid: LinqDataCalc.LinqDataCalcExtensions.DictionaryRndFill(System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Int32,System.Int32}},System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.DictionaryRndFill(System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Int32,System.Int32}},System.Int32)
  id: DictionaryRndFill(System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Int32,System.Int32}},System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: DictionaryRndFill(Dictionary<string, Tuple<int, int>>, int)
  nameWithType: LinqDataCalcExtensions.DictionaryRndFill(Dictionary<string, Tuple<int, int>>, int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.DictionaryRndFill(System.Collections.Generic.Dictionary<string, System.Tuple<int, int>>, int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: DictionaryRndFill
    path: LinqDataCalc.cs
    startLine: 981
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Retrieve a dictionary with random integer numbers and a randomly produced string.
  example:
  - >-
    Get an IDictionary filled with string keys and corresponding integer random values.

    <pre><code class="lang-csharp">// 1 - full code not shown.. Initialize a dictionary of key-value type key=string/value=Tuple(int,int)
              //2 - call following method of the dictionary -&gt; dict_var.DictionaryRndFill(10);</code></pre>
  syntax:
    content: public static IDictionary<string, Tuple<int, int>> DictionaryRndFill(this Dictionary<string, Tuple<int, int>> dictionary, int length)
    parameters:
    - id: dictionary
      type: System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Int32,System.Int32}}
      description: ''
    - id: length
      type: System.Int32
      description: The maximum amount of info produced
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Tuple{System.Int32,System.Int32}}
      description: A dictionary of key=string/value=Tuple(int,int) type layout filled with random values
    content.vb: Public Shared Function DictionaryRndFill(dictionary As Dictionary(Of String, Tuple(Of Integer, Integer)), length As Integer) As IDictionary(Of String, Tuple(Of Integer, Integer))
  overload: LinqDataCalc.LinqDataCalcExtensions.DictionaryRndFill*
  nameWithType.vb: LinqDataCalcExtensions.DictionaryRndFill(Dictionary(Of String, Tuple(Of Integer, Integer)), Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.DictionaryRndFill(System.Collections.Generic.Dictionary(Of String, System.Tuple(Of Integer, Integer)), Integer)
  name.vb: DictionaryRndFill(Dictionary(Of String, Tuple(Of Integer, Integer)), Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.RndIntTuple(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.RndIntTuple(System.Collections.Generic.IEnumerable{System.Int32})
  id: RndIntTuple(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: RndIntTuple(IEnumerable<int>)
  nameWithType: LinqDataCalcExtensions.RndIntTuple(IEnumerable<int>)
  fullName: LinqDataCalc.LinqDataCalcExtensions.RndIntTuple(System.Collections.Generic.IEnumerable<int>)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: RndIntTuple
    path: LinqDataCalc.cs
    startLine: 1011
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Provided a list of integer values you, retrieve a list of tuples and random integer with random string values.
  remarks: >-
    This works using argument deconstruction by ValueTuple type (available with C# &gt;= 7, .NET &gt;= 4.7, VS 2019)
        Already included *.dll reference for ValueTuples (currently .NET = 4.6.*)
  example:
  - >-
    Get an List Tuple filled with random integers and random strings.

    <pre><code class="lang-csharp">var resRndInt = Enumerable.Range(1,10).RndIntTuple();</code></pre>
  syntax:
    content: public static IList<(int sample, string name)> RndIntTuple(this IEnumerable<int> elements)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: A list of default integers to be modified
    return:
      type: System.Collections.Generic.IList{System.ValueTuple{System.Int32,System.String}}
      description: A list of tuples with random integers and string values
    content.vb: Public Shared Function RndIntTuple(elements As IEnumerable(Of Integer)) As IList(Of (sample As Integer, name As String))
  overload: LinqDataCalc.LinqDataCalcExtensions.RndIntTuple*
  nameWithType.vb: LinqDataCalcExtensions.RndIntTuple(IEnumerable(Of Integer))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.RndIntTuple(System.Collections.Generic.IEnumerable(Of Integer))
  name.vb: RndIntTuple(IEnumerable(Of Integer))
- uid: LinqDataCalc.LinqDataCalcExtensions.RndDoubleTuple(System.Collections.Generic.IEnumerable{System.Int32},System.Double)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.RndDoubleTuple(System.Collections.Generic.IEnumerable{System.Int32},System.Double)
  id: RndDoubleTuple(System.Collections.Generic.IEnumerable{System.Int32},System.Double)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: RndDoubleTuple(IEnumerable<int>, double)
  nameWithType: LinqDataCalcExtensions.RndDoubleTuple(IEnumerable<int>, double)
  fullName: LinqDataCalc.LinqDataCalcExtensions.RndDoubleTuple(System.Collections.Generic.IEnumerable<int>, double)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: RndDoubleTuple
    path: LinqDataCalc.cs
    startLine: 1028
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Provided a list of integer values you, retrieve a list of tuples and random doubles with random string values.
  remarks: >-
    This works using argument deconstruction by ValueTuple type (available with C# &gt;= 7, .NET &gt;= 4.7, VS 2019)
        Already included *.dll reference for ValueTuples (currently .NET = 4.6.*)
  example:
  - >-
    Get a List Tuple filled with random doubles and random strings.

    <pre><code class="lang-csharp">var resRndDouble = Enumerable.Range(1,10).RndDoubleTuple(.001);</code></pre>
  syntax:
    content: public static IList<(double sample, string name)> RndDoubleTuple(this IEnumerable<int> elements, double scaleFact)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: A list of default integers to be modified
    - id: scaleFact
      type: System.Double
      description: The scaling factor by which double values are created
    return:
      type: System.Collections.Generic.IList{System.ValueTuple{System.Double,System.String}}
      description: A list of tuples with random doubles and string values
    content.vb: Public Shared Function RndDoubleTuple(elements As IEnumerable(Of Integer), scaleFact As Double) As IList(Of (sample As Double, name As String))
  overload: LinqDataCalc.LinqDataCalcExtensions.RndDoubleTuple*
  nameWithType.vb: LinqDataCalcExtensions.RndDoubleTuple(IEnumerable(Of Integer), Double)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.RndDoubleTuple(System.Collections.Generic.IEnumerable(Of Integer), Double)
  name.vb: RndDoubleTuple(IEnumerable(Of Integer), Double)
- uid: LinqDataCalc.LinqDataCalcExtensions.AsNumberTuples(System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.AsNumberTuples(System.Collections.Generic.IEnumerable{System.Object})
  id: AsNumberTuples(System.Collections.Generic.IEnumerable{System.Object})
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: AsNumberTuples(IEnumerable<object>)
  nameWithType: LinqDataCalcExtensions.AsNumberTuples(IEnumerable<object>)
  fullName: LinqDataCalc.LinqDataCalcExtensions.AsNumberTuples(System.Collections.Generic.IEnumerable<object>)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: AsNumberTuples
    path: LinqDataCalc.cs
    startLine: 1044
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Retrieve a list of numeric tuples from an input list of objects.
  example:
  - >-
    Get a List of zero-filled Tuples with numeric values (int/ulong/long/double/decimal).

    <pre><code class="lang-csharp">object[] types = { "###","hello1","!*",439,30,12,1.3,3.2m,new List{1,3,5,78,14,24,40,9},'d',3283782378289,"2902",92.4m,"345,2",881.74m,30333.1434,-43902,(new int[]{10,490,20,103,40,30}),930 };

    var resTuple = types.AsNumberTuples();</code></pre>
  syntax:
    content: public static IList<Tuple<int, ulong, long, double, decimal>> AsNumberTuples(this IEnumerable<object> elements)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: The list of objects to be used as input
    return:
      type: System.Collections.Generic.IList{System.Tuple{System.Int32,System.UInt64,System.Int64,System.Double,System.Decimal}}
      description: A list of tuples with the relevant data types retrieved from the objects list
    content.vb: Public Shared Function AsNumberTuples(elements As IEnumerable(Of Object)) As IList(Of Tuple(Of Integer, ULong, Long, Double, Decimal))
  overload: LinqDataCalc.LinqDataCalcExtensions.AsNumberTuples*
  nameWithType.vb: LinqDataCalcExtensions.AsNumberTuples(IEnumerable(Of Object))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.AsNumberTuples(System.Collections.Generic.IEnumerable(Of Object))
  name.vb: AsNumberTuples(IEnumerable(Of Object))
- uid: LinqDataCalc.LinqDataCalcExtensions.ToIntMatrix(System.String,System.Int32[0:,0:])
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.ToIntMatrix(System.String,System.Int32[0:,0:])
  id: ToIntMatrix(System.String,System.Int32[0:,0:])
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: ToIntMatrix(string, int[,])
  nameWithType: LinqDataCalcExtensions.ToIntMatrix(string, int[,])
  fullName: LinqDataCalc.LinqDataCalcExtensions.ToIntMatrix(string, int[,])
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: ToIntMatrix
    path: LinqDataCalc.cs
    startLine: 1078
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Present a sequence of numbers in a string,

    into a 2-dimensional matrix (letters and some characters are ommited)

    that has zero-fill for extra positions in case that array is larger than input.
  example:
  - >-
    Retrieve ONLY numbers from a string represented in a 2d matrix array.

    Note: Minimum array dimensions are 2x2 (used as default when input length less than 4 or when overallocating array space).

    <pre><code class="lang-csharp">int[,] result = "2911".ToIntMatrix(new int[4,4]); // Result OK with zero padding

    int[,] result = "2962728abcs1119__1".ToIntMatrix(new int[4,10]); //Result OK with zero padding

    int[,] result = "2962728abcs1119__1".ToIntMatrix(new int[4,2]); //Result OK, trimmed

    int[,] result = "2962728abcs1119__1".ToIntMatrix(new int[4,3]); //Result OK

    int[,] result = "2962728abcs1119__1".ToIntMatrix(new int[10,10]); //Result n/a, trimmed to 2x2 with zero padding

    int[,] result = "29".ToIntMatrix(new int[1,2]); //Result n/a, trimmed to 2x2 with zero padding</code></pre>
  syntax:
    content: public static int[,] ToIntMatrix(this string StrNum, int[,] twodimOut)
    parameters:
    - id: StrNum
      type: System.String
      description: The string of numbers to be used as input
    - id: twodimOut
      type: System.Int32[,]
      description: The 2d matrix to be used as output
    return:
      type: System.Int32[,]
      description: A 2-dimensional integer matrix, of prespecified dimensions N x M
    content.vb: Public Shared Function ToIntMatrix(StrNum As String, twodimOut As Integer(,)) As Integer(,)
  overload: LinqDataCalc.LinqDataCalcExtensions.ToIntMatrix*
  nameWithType.vb: LinqDataCalcExtensions.ToIntMatrix(String, Integer(,))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.ToIntMatrix(String, Integer(,))
  name.vb: ToIntMatrix(String, Integer(,))
- uid: LinqDataCalc.LinqDataCalcExtensions.LevnDistEditMatrix(System.String,System.String)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.LevnDistEditMatrix(System.String,System.String)
  id: LevnDistEditMatrix(System.String,System.String)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: LevnDistEditMatrix(string, string)
  nameWithType: LinqDataCalcExtensions.LevnDistEditMatrix(string, string)
  fullName: LinqDataCalc.LinqDataCalcExtensions.LevnDistEditMatrix(string, string)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: LevnDistEditMatrix
    path: LinqDataCalc.cs
    startLine: 1138
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Levenshtein edit distance matrix retrieval with full set of calculations.

    (Can be applied between two strings of equal or differing length in size)
  example:
  - >-
    Calculate the levenshtein distance of two strings, return the entire set of iterations, 

    element at array position [N,M] is the result of the total diff distance.

    <pre><code class="lang-csharp">var result_ienum = "test2".LevnDistEditMatrix("arst22"); //last matrix element = 3
        var result_ienum = "ant".LevnDistEditMatrix("aunt"); //last matrix element = 1</code></pre>
  syntax:
    content: public static IEnumerable<int[,]> LevnDistEditMatrix(this string str1, string str2)
    parameters:
    - id: str1
      type: System.String
      description: The leftmost string to compare edit diffs from
    - id: str2
      type: System.String
      description: The rightmost string to compare edit diffs with
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32[0:,0:]}
      description: An enumerable of the entire 2-dimensional edit distances matrix with all distance calculations.
    content.vb: Public Shared Function LevnDistEditMatrix(str1 As String, str2 As String) As IEnumerable(Of Integer(,))
  overload: LinqDataCalc.LinqDataCalcExtensions.LevnDistEditMatrix*
  nameWithType.vb: LinqDataCalcExtensions.LevnDistEditMatrix(String, String)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.LevnDistEditMatrix(String, String)
  name.vb: LevnDistEditMatrix(String, String)
- uid: LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose``1(``0[0:,0:])
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose``1(``0[0:,0:])
  id: MatrixTranspose``1(``0[0:,0:])
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: MatrixTranspose<T>(T[,])
  nameWithType: LinqDataCalcExtensions.MatrixTranspose<T>(T[,])
  fullName: LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose<T>(T[,])
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: MatrixTranspose
    path: LinqDataCalc.cs
    startLine: 1191
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Transposes a 2-dimensional array of different data type such that rows N become columns M and vice-versa.
  example:
  - >-
    Transpose 2-dimensional matrix of dimensions [N,M].

    <pre><code class="lang-csharp">int[,] matrixT1 = new int[6,2] { {3,4},{5,9},{10,44},{3,77},{88,0},{0,90} }; //test with integers matrix


    double[,] matrixT2 = new double[5,9]{ {9.0,34.0,0.99,3.1,9.4,4.51,9.87,1.43,9.88}, {2.4,22.01,55.10,9.09,1.30,9.99,10.45,9.0,8.01},
                                          {4.6,4.3,3.4,68.009,45.92,3.54,9.89,5.69,0.849},{1.2,4.5,33.5,54.4,45.9,5.89,9.09,1.223,4.54},
                                          {4.5,1.0,4,42.9,9.9,9.9,9,9,9} }; //test with doubles matrix

    var resultT1 = matrixT1.MatrixTranspose(); // results in a 2x6 matrix

    var resultT2 = matrixT2.MatrixTranspose();  // results in a 9x5 matrix</code></pre>
  syntax:
    content: public static T[,] MatrixTranspose<T>(this T[,] matrixIn)
    parameters:
    - id: matrixIn
      type: '{T}[,]'
      description: The 2-dimensional input matrix to invert rows with columns from
    typeParameters:
    - id: T
      description: Any kind of elements in a sequence
    return:
      type: '{T}[,]'
      description: Transposed 2-dimensional matrix of the original input array for any kind of array elements.
    content.vb: Public Shared Function MatrixTranspose(Of T)(matrixIn As T(,)) As T(,)
  overload: LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose*
  nameWithType.vb: LinqDataCalcExtensions.MatrixTranspose(Of T)(T(,))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose(Of T)(T(,))
  name.vb: MatrixTranspose(Of T)(T(,))
- uid: LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose``1(``0[][])
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose``1(``0[][])
  id: MatrixTranspose``1(``0[][])
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: MatrixTranspose<T>(T[][])
  nameWithType: LinqDataCalcExtensions.MatrixTranspose<T>(T[][])
  fullName: LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose<T>(T[][])
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: MatrixTranspose
    path: LinqDataCalc.cs
    startLine: 1228
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Transposes a 2-dimensional jagged -or uneven- array of different data type such that rows N become columns M and vice-versa.
  example:
  - >-
    Transposed 2-dimensional jagged array of dimensions [N][M].

    <pre><code class="lang-csharp">string[][] matrixT3 = new string[][]{ //test with strings array

    new string[12]{"This", "is a", "test","this","side","should","appear","on the left","of ","your","screen","if the"},

    new string[12]{" script"," has ","been run ","as", " expected.","Test ","run"," already ","for a ","matrix of ","nxm size "," where n is" },

    new string[12]{"equal to 3"," and ","m equal"," to "," twelve"," If n"," and  m","increase"," or decrease then","output should","vary ","accordingly"}

    };


    var resultT3 = matrixT3.MatrixTranspose(); //results in a 12x3 jagged array [12][3]</code></pre>
  syntax:
    content: public static T[][] MatrixTranspose<T>(this T[][] matrixIn)
    parameters:
    - id: matrixIn
      type: '{T}[][]'
      description: The 2-dimensional jagged array to invert rows with columns from
    typeParameters:
    - id: T
      description: Any kind of elements in a sequence
    return:
      type: '{T}[][]'
      description: Transposed 2-dimensional jagged array of the original input array for any kind of array elements.
    content.vb: Public Shared Function MatrixTranspose(Of T)(matrixIn As T()()) As T()()
  overload: LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose*
  nameWithType.vb: LinqDataCalcExtensions.MatrixTranspose(Of T)(T()())
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose(Of T)(T()())
  name.vb: MatrixTranspose(Of T)(T()())
- uid: LinqDataCalc.LinqDataCalcExtensions.VectorProduct(System.Int32[],System.Int32[])
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.VectorProduct(System.Int32[],System.Int32[])
  id: VectorProduct(System.Int32[],System.Int32[])
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: VectorProduct(int[], int[])
  nameWithType: LinqDataCalcExtensions.VectorProduct(int[], int[])
  fullName: LinqDataCalc.LinqDataCalcExtensions.VectorProduct(int[], int[])
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: VectorProduct
    path: LinqDataCalc.cs
    startLine: 1263
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Calculation of the dot product for integer vectors N -vector multiplication-
  example:
  - >-
    Calculate and retrieve the dot product of multiplying two vectors as an IEnumerable.

    <pre><code class="lang-csharp">int[] vect1 = {2,3,3}; // First vector

    int[] vect2 = {3,2,2}; // Second vector

    var result = vect1.VectorProduct(vect2); // result is an IEnumerable list of multipl. values</code></pre>
  syntax:
    content: public static IEnumerable<int> VectorProduct(this int[] v1, int[] v2)
    parameters:
    - id: v1
      type: System.Int32[]
      description: First integer array vector to multiply values from
    - id: v2
      type: System.Int32[]
      description: Second integer array vectr to multiply values with
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: An integer IEnumerable containing the dot product values based on the initial vectors
    content.vb: Public Shared Function VectorProduct(v1 As Integer(), v2 As Integer()) As IEnumerable(Of Integer)
  overload: LinqDataCalc.LinqDataCalcExtensions.VectorProduct*
  nameWithType.vb: LinqDataCalcExtensions.VectorProduct(Integer(), Integer())
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.VectorProduct(Integer(), Integer())
  name.vb: VectorProduct(Integer(), Integer())
- uid: LinqDataCalc.LinqDataCalcExtensions.MatrixProductv2(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.MatrixProductv2(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32)
  id: MatrixProductv2(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: MatrixProductv2(int[,], int[,], int)
  nameWithType: LinqDataCalcExtensions.MatrixProductv2(int[,], int[,], int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.MatrixProductv2(int[,], int[,], int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: MatrixProductv2
    path: LinqDataCalc.cs
    startLine: 1284
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Matrix dot product calculation for 2-dimensional integer arrays of shape NxM.

    (Outputs the finalized product matrix in either list of lists or standard 2-d array format)
  example:
  - >-
    Calculate and retrieve the dot product of multiplying two matrices in both list-of-lists format or 

    standard 2-dimensional array format. This can be determined by a variable, defaults to 2-dimensional array output.

    <pre><code class="lang-csharp">var result_1 = new int[4,2]{{2,2},{3,7},{8,4},{8,5}}.MatrixProductv2(new int[2,3]{{1,2,4},{12,42,9}},0); // Results to 2-dim array output

    var result_2 = new int[4,2]{{2,2},{3,7},{8,4},{8,5}}.MatrixProductv2(new int[2,3]{{1,2,4},{12,42,9}},1); // Results to list of lists output</code></pre>
  syntax:
    content: public static object MatrixProductv2(this int[,] mtrx1, int[,] mtrx2, int twoDim = 0)
    parameters:
    - id: mtrx1
      type: System.Int32[,]
      description: First integer matrix to be used for multipl. product
    - id: mtrx2
      type: System.Int32[,]
      description: Second integer matrix to be multiplied with for multipl. product
    - id: twoDim
      type: System.Int32
      description: Selection option to retrieve the product result as a list of sublists or as a normal 2-dimensional matrix
    return:
      type: System.Object
      description: An Object of either List of sublists type or int[,] type that defines product matrix result.
    content.vb: Public Shared Function MatrixProductv2(mtrx1 As Integer(,), mtrx2 As Integer(,), twoDim As Integer = 0) As Object
  overload: LinqDataCalc.LinqDataCalcExtensions.MatrixProductv2*
  nameWithType.vb: LinqDataCalcExtensions.MatrixProductv2(Integer(,), Integer(,), Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.MatrixProductv2(Integer(,), Integer(,), Integer)
  name.vb: MatrixProductv2(Integer(,), Integer(,), Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.MatrixProduct(System.Int32[0:,0:],System.Int32[0:,0:])
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.MatrixProduct(System.Int32[0:,0:],System.Int32[0:,0:])
  id: MatrixProduct(System.Int32[0:,0:],System.Int32[0:,0:])
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: MatrixProduct(int[,], int[,])
  nameWithType: LinqDataCalcExtensions.MatrixProduct(int[,], int[,])
  fullName: LinqDataCalc.LinqDataCalcExtensions.MatrixProduct(int[,], int[,])
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: MatrixProduct
    path: LinqDataCalc.cs
    startLine: 1352
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: >-
    Matrix dot product calculation for 2-dimensional integer arrays of shape NxM.

    (PLINQ utilization for large data sets handling)
  example:
  - >-
    Calculate and retrieve the dot product of multiplying the two input matrices.

    <pre><code class="lang-csharp">var result = new int[4,2]{{2,2},{3,7},{8,4},{8,5}}.MatrixProduct(new int[2,3]{{1,2,4},{12,42,9}}); // Result as a 2-dim array</code></pre>
  syntax:
    content: public static int[,] MatrixProduct(this int[,] matrixA, int[,] matrixB)
    parameters:
    - id: matrixA
      type: System.Int32[,]
      description: First integer matrix to be used for multipl. product
    - id: matrixB
      type: System.Int32[,]
      description: Second integer matrix to be multiplied with for multipl. product
    return:
      type: System.Int32[,]
      description: The product matrix in a 2-dimensional matrix format
    content.vb: Public Shared Function MatrixProduct(matrixA As Integer(,), matrixB As Integer(,)) As Integer(,)
  overload: LinqDataCalc.LinqDataCalcExtensions.MatrixProduct*
  nameWithType.vb: LinqDataCalcExtensions.MatrixProduct(Integer(,), Integer(,))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.MatrixProduct(Integer(,), Integer(,))
  name.vb: MatrixProduct(Integer(,), Integer(,))
- uid: LinqDataCalc.LinqDataCalcExtensions.MaxMatrixVal(System.Int32[0:,0:],System.Boolean)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.MaxMatrixVal(System.Int32[0:,0:],System.Boolean)
  id: MaxMatrixVal(System.Int32[0:,0:],System.Boolean)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: MaxMatrixVal(int[,], bool)
  nameWithType: LinqDataCalcExtensions.MaxMatrixVal(int[,], bool)
  fullName: LinqDataCalc.LinqDataCalcExtensions.MaxMatrixVal(int[,], bool)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: MaxMatrixVal
    path: LinqDataCalc.cs
    startLine: 1393
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Retrieve either the maximum or minimum value in a 2-dimensional integer matrix.
  example:
  - >-
    Retrieve the maximum, or minimum integer value from the input matrix.

    <pre><code class="lang-csharp">int[,] arr2d = new int[,]{{10,40,13,40},{9,10,40,99},{9,10,40,99},{9,10,49,19},{9,10,40,990},{9,10,422,99}};

    var result = arr2d.MaxMatrixVal() // defaults to maximum value = 990

    var result = arr2d.MaxMatrixVal(false) // retrieve minimum value = 9</code></pre>
  syntax:
    content: public static int MaxMatrixVal(this int[,] mtrx, bool isMax = true)
    parameters:
    - id: mtrx
      type: System.Int32[,]
      description: Input matrix to retrieve max-min values from
    - id: isMax
      type: System.Boolean
      description: Option to retrieve either the maximum or minimum value from 2-dimensional dataset from
    return:
      type: System.Int32
      description: The maximum or minimum integer value of the input matrix
    content.vb: Public Shared Function MaxMatrixVal(mtrx As Integer(,), isMax As Boolean = True) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.MaxMatrixVal*
  nameWithType.vb: LinqDataCalcExtensions.MaxMatrixVal(Integer(,), Boolean)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.MaxMatrixVal(Integer(,), Boolean)
  name.vb: MaxMatrixVal(Integer(,), Boolean)
- uid: LinqDataCalc.LinqDataCalcExtensions.MaxMultiDimVal(System.Int32[][],System.Boolean)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.MaxMultiDimVal(System.Int32[][],System.Boolean)
  id: MaxMultiDimVal(System.Int32[][],System.Boolean)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: MaxMultiDimVal(int[][], bool)
  nameWithType: LinqDataCalcExtensions.MaxMultiDimVal(int[][], bool)
  fullName: LinqDataCalc.LinqDataCalcExtensions.MaxMultiDimVal(int[][], bool)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: MaxMultiDimVal
    path: LinqDataCalc.cs
    startLine: 1416
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Retrieve either the maximum or minimum value in a jagged array data structure.
  example:
  - >-
    Retrieve the maximum, or minimum integer value from the input array of arrays.

    <pre><code class="lang-csharp">int[] arr1 = new int[] {1,2,3,5,4};

    int[] arr2 = new int[] {3,2,1,0,10,39,10,43,11};

    int[] arr3 = new int[]{24,1,90};

    int[][] main_arr = new int[][]{arr1,arr2,arr3};

    var result = main_arr.MaxMultiDimVal() // defaults to maximum value = 90

    var result = main_arr.MaxMultiDimVal(false) // retrieve minimum value = 0</code></pre>
  syntax:
    content: public static int MaxMultiDimVal(this int[][] mtrx, bool isMax = true)
    parameters:
    - id: mtrx
      type: System.Int32[][]
      description: Input matrix to retrieve max-min values from
    - id: isMax
      type: System.Boolean
      description: Option to retrieve either the maximum or minimum value from the jagged array dataset
    return:
      type: System.Int32
      description: The maximum or minimum integer value of the input array of arrays
    content.vb: Public Shared Function MaxMultiDimVal(mtrx As Integer()(), isMax As Boolean = True) As Integer
  overload: LinqDataCalc.LinqDataCalcExtensions.MaxMultiDimVal*
  nameWithType.vb: LinqDataCalcExtensions.MaxMultiDimVal(Integer()(), Boolean)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.MaxMultiDimVal(Integer()(), Boolean)
  name.vb: MaxMultiDimVal(Integer()(), Boolean)
- uid: LinqDataCalc.LinqDataCalcExtensions.MaxCollVals(System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}},System.Boolean)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.MaxCollVals(System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}},System.Boolean)
  id: MaxCollVals(System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}},System.Boolean)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: MaxCollVals(List<List<int>>, bool)
  nameWithType: LinqDataCalcExtensions.MaxCollVals(List<List<int>>, bool)
  fullName: LinqDataCalc.LinqDataCalcExtensions.MaxCollVals(System.Collections.Generic.List<System.Collections.Generic.List<int>>, bool)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: MaxCollVals
    path: LinqDataCalc.cs
    startLine: 1442
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Retrieve either the maximum or minimum set of value from every nested integer list-of-lists data structure.
  example:
  - >-
    Retrieve all the maximum, or minimum integer values for each column-based subset in the input nested list.

    <pre><code class="lang-csharp">// 1 - Provided that you initialize a list of lists (code not shown..)

    // . . . 

    allValues.Add(valuesSet1); // 2 - populate the lists of lists

    allValues.Add(valuesSet2);

    allValues.Add(valuesSet3);

    allValues.Add(valuesSet4);

    var result = allValues.MaxCollVals(); //defaults to maximum subset of values for every column-compared subset of lists

    var result = allValues.MaxCollVals(false); //results to minimum subset of values for every column-compared subset of lists</code></pre>
  syntax:
    content: public static List<int> MaxCollVals(this List<List<int>> inputColl, bool isMax = true)
    parameters:
    - id: inputColl
      type: System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}}
      description: Input nested list to retrieve max-min set of values from
    - id: isMax
      type: System.Boolean
      description: Option to retrieve either the maximum or minimum values per subset in every list-of-lists dataset
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: An integer list containing the maximum value of each column-compared subset in list-of lists
    content.vb: Public Shared Function MaxCollVals(inputColl As List(Of List(Of Integer)), isMax As Boolean = True) As List(Of Integer)
  overload: LinqDataCalc.LinqDataCalcExtensions.MaxCollVals*
  nameWithType.vb: LinqDataCalcExtensions.MaxCollVals(List(Of List(Of Integer)), Boolean)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.MaxCollVals(System.Collections.Generic.List(Of System.Collections.Generic.List(Of Integer)), Boolean)
  name.vb: MaxCollVals(List(Of List(Of Integer)), Boolean)
- uid: LinqDataCalc.LinqDataCalcExtensions.LetterCombinationsOf(System.String)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.LetterCombinationsOf(System.String)
  id: LetterCombinationsOf(System.String)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: LetterCombinationsOf(string)
  nameWithType: LinqDataCalcExtensions.LetterCombinationsOf(string)
  fullName: LinqDataCalc.LinqDataCalcExtensions.LetterCombinationsOf(string)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: LetterCombinationsOf
    path: LinqDataCalc.cs
    startLine: 1461
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Retrieve all letter combinations (power sets) of a provided string.
  example:
  - >-
    Get a List of strings displaying letter combinations.

    <pre><code class="lang-csharp">var combinations = ("He1l01!").LetterCombinationsOf();</code></pre>
  syntax:
    content: public static List<string> LetterCombinationsOf(this string strElement)
    parameters:
    - id: strElement
      type: System.String
      description: The string of letters used as input
    return:
      type: System.Collections.Generic.List{System.String}
      description: A list of all combinations for the input string
    content.vb: Public Shared Function LetterCombinationsOf(strElement As String) As List(Of String)
  overload: LinqDataCalc.LinqDataCalcExtensions.LetterCombinationsOf*
  nameWithType.vb: LinqDataCalcExtensions.LetterCombinationsOf(String)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.LetterCombinationsOf(String)
  name.vb: LetterCombinationsOf(String)
- uid: LinqDataCalc.LinqDataCalcExtensions.GetRandomElements``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.GetRandomElements``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: GetRandomElements``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: GetRandomElements<T>(IEnumerable<T>, int)
  nameWithType: LinqDataCalcExtensions.GetRandomElements<T>(IEnumerable<T>, int)
  fullName: LinqDataCalc.LinqDataCalcExtensions.GetRandomElements<T>(System.Collections.Generic.IEnumerable<T>, int)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: GetRandomElements
    path: LinqDataCalc.cs
    startLine: 1496
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Retrieve a list of random elements from an input list.
  example:
  - >-
    Get an IEnumerable of 10 randomly selected elements.

    <pre><code class="lang-csharp">var tenElements = Enumerable.Range(1,100).GetRandomElements(10);</code></pre>
  syntax:
    content: public static IEnumerable<T> GetRandomElements<T>(this IEnumerable<T> elements, int totElements)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The list of elements to be used as input
    - id: totElements
      type: System.Int32
      description: The maximum number of random elements to be retrieved
    typeParameters:
    - id: T
      description: Any type of elements in the list
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A list of random elements with specified total length
    content.vb: Public Shared Function GetRandomElements(Of T)(elements As IEnumerable(Of T), totElements As Integer) As IEnumerable(Of T)
  overload: LinqDataCalc.LinqDataCalcExtensions.GetRandomElements*
  nameWithType.vb: LinqDataCalcExtensions.GetRandomElements(Of T)(IEnumerable(Of T), Integer)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.GetRandomElements(Of T)(System.Collections.Generic.IEnumerable(Of T), Integer)
  name.vb: GetRandomElements(Of T)(IEnumerable(Of T), Integer)
- uid: LinqDataCalc.LinqDataCalcExtensions.ReorderElements``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.ReorderElements``1(System.Collections.Generic.IEnumerable{``0})
  id: ReorderElements``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: ReorderElements<T>(IEnumerable<T>)
  nameWithType: LinqDataCalcExtensions.ReorderElements<T>(IEnumerable<T>)
  fullName: LinqDataCalc.LinqDataCalcExtensions.ReorderElements<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: ReorderElements
    path: LinqDataCalc.cs
    startLine: 1511
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Retrieve a list of random elements from an input list -using natural reordering-.
  example:
  - >-
    Get an IEnumerable of 10 reordered elements.

    <pre><code class="lang-csharp">var tenElements = Enumerable.Range(1,10).ReorderElements().Take(10);</code></pre>
  syntax:
    content: public static IEnumerable<T> ReorderElements<T>(this IEnumerable<T> elements)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    typeParameters:
    - id: T
      description: Any type of elements in the list
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A reording elements iterator result with the Random object seed
    content.vb: Public Shared Function ReorderElements(Of T)(elements As IEnumerable(Of T)) As IEnumerable(Of T)
  overload: LinqDataCalc.LinqDataCalcExtensions.ReorderElements*
  nameWithType.vb: LinqDataCalcExtensions.ReorderElements(Of T)(IEnumerable(Of T))
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.ReorderElements(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ReorderElements(Of T)(IEnumerable(Of T))
- uid: LinqDataCalc.LinqDataCalcExtensions.ReorderElementsIterator``1(System.Collections.Generic.IEnumerable{``0},System.Random)
  commentId: M:LinqDataCalc.LinqDataCalcExtensions.ReorderElementsIterator``1(System.Collections.Generic.IEnumerable{``0},System.Random)
  id: ReorderElementsIterator``1(System.Collections.Generic.IEnumerable{``0},System.Random)
  isExtensionMethod: true
  parent: LinqDataCalc.LinqDataCalcExtensions
  langs:
  - csharp
  - vb
  name: ReorderElementsIterator<T>(IEnumerable<T>, Random)
  nameWithType: LinqDataCalcExtensions.ReorderElementsIterator<T>(IEnumerable<T>, Random)
  fullName: LinqDataCalc.LinqDataCalcExtensions.ReorderElementsIterator<T>(System.Collections.Generic.IEnumerable<T>, System.Random)
  type: Method
  source:
    remote:
      path: LinqDataCalc/LinqDataCalc.cs
      branch: main
      repo: https://github.com/chrdek/LinqDataCalc.git
    id: ReorderElementsIterator
    path: LinqDataCalc.cs
    startLine: 1522
  assemblies:
  - LinqDataCalc
  namespace: LinqDataCalc
  summary: Implementation of the iterative functionality for the list reording.
  example: []
  syntax:
    content: public static IEnumerable<T> ReorderElementsIterator<T>(this IEnumerable<T> elements, Random prng)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The list of elements to be used as input
    - id: prng
      type: System.Random
      description: The Random object to be used as seed for shuffling indexes
    typeParameters:
    - id: T
      description: Any type of elements in the list
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A list of reordered elements using random index shuffling in the initial list
    content.vb: Public Shared Function ReorderElementsIterator(Of T)(elements As IEnumerable(Of T), prng As Random) As IEnumerable(Of T)
  overload: LinqDataCalc.LinqDataCalcExtensions.ReorderElementsIterator*
  nameWithType.vb: LinqDataCalcExtensions.ReorderElementsIterator(Of T)(IEnumerable(Of T), Random)
  fullName.vb: LinqDataCalc.LinqDataCalcExtensions.ReorderElementsIterator(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Random)
  name.vb: ReorderElementsIterator(Of T)(IEnumerable(Of T), Random)
references:
- uid: LinqDataCalc
  commentId: N:LinqDataCalc
  href: LinqDataCalc.html
  name: LinqDataCalc
  nameWithType: LinqDataCalc
  fullName: LinqDataCalc
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: LinqDataCalc.LinqDataCalcExtensions.ModeValues*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.ModeValues
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.ModeValues(System.Collections.Generic.IEnumerable{System.Int32})
  name: ModeValues
  nameWithType: LinqDataCalcExtensions.ModeValues
  fullName: LinqDataCalc.LinqDataCalcExtensions.ModeValues
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<int>
  nameWithType: IEnumerable<int>
  fullName: System.Collections.Generic.IEnumerable<int>
  nameWithType.vb: IEnumerable(Of Integer)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Integer)
  name.vb: IEnumerable(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<KeyValuePair<int, int>>
  nameWithType: IEnumerable<KeyValuePair<int, int>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<int, int>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Integer, Integer))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of Integer, Integer))
  name.vb: IEnumerable(Of KeyValuePair(Of Integer, Integer))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: LinqDataCalc.LinqDataCalcExtensions.MedianValue*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.MedianValue
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.MedianValue(System.Collections.Generic.IEnumerable{System.Int32})
  name: MedianValue
  nameWithType: LinqDataCalcExtensions.MedianValue
  fullName: LinqDataCalc.LinqDataCalcExtensions.MedianValue
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: LinqDataCalc.LinqDataCalcExtensions.OddOrEven*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.OddOrEven
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.OddOrEven``1(System.Collections.Generic.IEnumerable{``0})
  name: OddOrEven
  nameWithType: LinqDataCalcExtensions.OddOrEven
  fullName: LinqDataCalc.LinqDataCalcExtensions.OddOrEven
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: LinqDataCalc.LinqDataCalcExtensions.CompareBytes*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.CompareBytes
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.CompareBytes(System.Byte[],System.Byte[])
  name: CompareBytes
  nameWithType: LinqDataCalcExtensions.CompareBytes
  fullName: LinqDataCalc.LinqDataCalcExtensions.CompareBytes
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.DiffBytes*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.DiffBytes
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.DiffBytes(System.Byte[],System.Byte[])
  name: DiffBytes
  nameWithType: LinqDataCalcExtensions.DiffBytes
  fullName: LinqDataCalc.LinqDataCalcExtensions.DiffBytes
- uid: System.Collections.Generic.IDictionary{System.Int32,System.Int32}
  commentId: T:System.Collections.Generic.IDictionary{System.Int32,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<int, int>
  nameWithType: IDictionary<int, int>
  fullName: System.Collections.Generic.IDictionary<int, int>
  nameWithType.vb: IDictionary(Of Integer, Integer)
  fullName.vb: System.Collections.Generic.IDictionary(Of Integer, Integer)
  name.vb: IDictionary(Of Integer, Integer)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.SequenceEquals*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.SequenceEquals
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.SequenceEquals``1(``0[0
  name: SequenceEquals
  nameWithType: LinqDataCalcExtensions.SequenceEquals
  fullName: LinqDataCalc.LinqDataCalcExtensions.SequenceEquals
- uid: '{T}[,]'
  isExternal: true
  name: T[,]
  nameWithType: T[,]
  fullName: T[,]
  nameWithType.vb: T(,)
  fullName.vb: T(,)
  name.vb: T(,)
  spec.csharp:
  - name: T
  - name: '['
  - name: ','
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: ','
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.HammingWeight*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.HammingWeight
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.HammingWeight(System.UInt32)
  name: HammingWeight
  nameWithType: LinqDataCalcExtensions.HammingWeight
  fullName: LinqDataCalc.LinqDataCalcExtensions.HammingWeight
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: LinqDataCalc.LinqDataCalcExtensions.HammingDist*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.HammingDist
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.HammingDist(System.String,System.String)
  name: HammingDist
  nameWithType: LinqDataCalcExtensions.HammingDist
  fullName: LinqDataCalc.LinqDataCalcExtensions.HammingDist
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: LinqDataCalc.LinqDataCalcExtensions.HammingDistAlgo*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.HammingDistAlgo
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.HammingDistAlgo(System.Int32,System.Int32,LinqDataCalc.LinqDataCalcExtensions.AlgoType)
  name: HammingDistAlgo
  nameWithType: LinqDataCalcExtensions.HammingDistAlgo
  fullName: LinqDataCalc.LinqDataCalcExtensions.HammingDistAlgo
- uid: LinqDataCalc.LinqDataCalcExtensions.AlgoType
  commentId: T:LinqDataCalc.LinqDataCalcExtensions.AlgoType
  parent: LinqDataCalc
  href: LinqDataCalc.LinqDataCalcExtensions.html
  name: LinqDataCalcExtensions.AlgoType
  nameWithType: LinqDataCalcExtensions.AlgoType
  fullName: LinqDataCalc.LinqDataCalcExtensions.AlgoType
  spec.csharp:
  - uid: LinqDataCalc.LinqDataCalcExtensions
    name: LinqDataCalcExtensions
    href: LinqDataCalc.LinqDataCalcExtensions.html
  - name: .
  - uid: LinqDataCalc.LinqDataCalcExtensions.AlgoType
    name: AlgoType
    href: LinqDataCalc.LinqDataCalcExtensions.AlgoType.html
  spec.vb:
  - uid: LinqDataCalc.LinqDataCalcExtensions
    name: LinqDataCalcExtensions
    href: LinqDataCalc.LinqDataCalcExtensions.html
  - name: .
  - uid: LinqDataCalc.LinqDataCalcExtensions.AlgoType
    name: AlgoType
    href: LinqDataCalc.LinqDataCalcExtensions.AlgoType.html
- uid: LinqDataCalc.LinqDataCalcExtensions.LevnDist*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.LevnDist
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.LevnDist(System.String,System.String)
  name: LevnDist
  nameWithType: LinqDataCalcExtensions.LevnDist
  fullName: LinqDataCalc.LinqDataCalcExtensions.LevnDist
- uid: LinqDataCalc.LinqDataCalcExtensions.LevnDistRecur*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.LevnDistRecur
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.LevnDistRecur(System.String,System.String,System.Int32[0
  name: LevnDistRecur
  nameWithType: LinqDataCalcExtensions.LevnDistRecur
  fullName: LinqDataCalc.LinqDataCalcExtensions.LevnDistRecur
- uid: System.Int32[,]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[,]
  nameWithType: int[,]
  fullName: int[,]
  nameWithType.vb: Integer(,)
  fullName.vb: Integer(,)
  name.vb: Integer(,)
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ','
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: ','
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.StandardDeviation
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})
  name: StandardDeviation
  nameWithType: LinqDataCalcExtensions.StandardDeviation
  fullName: LinqDataCalc.LinqDataCalcExtensions.StandardDeviation
- uid: System.Collections.Generic.IEnumerable{System.Int64}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<long>
  nameWithType: IEnumerable<long>
  fullName: System.Collections.Generic.IEnumerable<long>
  nameWithType.vb: IEnumerable(Of Long)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Long)
  name.vb: IEnumerable(Of Long)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.Double}
  commentId: T:System.Collections.Generic.IEnumerable{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<double>
  nameWithType: IEnumerable<double>
  fullName: System.Collections.Generic.IEnumerable<double>
  nameWithType.vb: IEnumerable(Of Double)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Double)
  name.vb: IEnumerable(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.ExpectedValue*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.ExpectedValue
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.ExpectedValue(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})
  name: ExpectedValue
  nameWithType: LinqDataCalcExtensions.ExpectedValue
  fullName: LinqDataCalc.LinqDataCalcExtensions.ExpectedValue
- uid: LinqDataCalc.LinqDataCalcExtensions.FiboSeq*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.FiboSeq
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.FiboSeq(System.Int32)
  name: FiboSeq
  nameWithType: LinqDataCalcExtensions.FiboSeq
  fullName: LinqDataCalc.LinqDataCalcExtensions.FiboSeq
- uid: System.Collections.Generic.IEnumerable{System.UInt64}
  commentId: T:System.Collections.Generic.IEnumerable{System.UInt64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<ulong>
  nameWithType: IEnumerable<ulong>
  fullName: System.Collections.Generic.IEnumerable<ulong>
  nameWithType.vb: IEnumerable(Of ULong)
  fullName.vb: System.Collections.Generic.IEnumerable(Of ULong)
  name.vb: IEnumerable(Of ULong)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.HappySeq*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.HappySeq
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.HappySeq(System.Int32)
  name: HappySeq
  nameWithType: LinqDataCalcExtensions.HappySeq
  fullName: LinqDataCalc.LinqDataCalcExtensions.HappySeq
- uid: LinqDataCalc.LinqDataCalcExtensions.FiboSeqGenerator*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.FiboSeqGenerator
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.FiboSeqGenerator(System.Int32)
  name: FiboSeqGenerator
  nameWithType: LinqDataCalcExtensions.FiboSeqGenerator
  fullName: LinqDataCalc.LinqDataCalcExtensions.FiboSeqGenerator
- uid: LinqDataCalc.LinqDataCalcExtensions.Factorial*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.Factorial
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.Factorial(System.Collections.Generic.IEnumerable{System.Int32})
  name: Factorial
  nameWithType: LinqDataCalcExtensions.Factorial
  fullName: LinqDataCalc.LinqDataCalcExtensions.Factorial
- uid: LinqDataCalc.LinqDataCalcExtensions.add*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.add
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.add(System.Int32,System.Int32)
  name: add
  nameWithType: LinqDataCalcExtensions.add
  fullName: LinqDataCalc.LinqDataCalcExtensions.add
- uid: LinqDataCalc.LinqDataCalcExtensions.subtract*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.subtract
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.subtract(System.Int32,System.Int32)
  name: subtract
  nameWithType: LinqDataCalcExtensions.subtract
  fullName: LinqDataCalc.LinqDataCalcExtensions.subtract
- uid: LinqDataCalc.LinqDataCalcExtensions.PowerOf*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.PowerOf
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.PowerOf(System.Int32,System.Int32)
  name: PowerOf
  nameWithType: LinqDataCalcExtensions.PowerOf
  fullName: LinqDataCalc.LinqDataCalcExtensions.PowerOf
- uid: LinqDataCalc.LinqDataCalcExtensions.ToIntPowerOf*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.ToIntPowerOf
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.ToIntPowerOf(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)
  name: ToIntPowerOf
  nameWithType: LinqDataCalcExtensions.ToIntPowerOf
  fullName: LinqDataCalc.LinqDataCalcExtensions.ToIntPowerOf
- uid: LinqDataCalc.LinqDataCalcExtensions.ToDoublePowerOf*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.ToDoublePowerOf
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.ToDoublePowerOf(System.Collections.Generic.IEnumerable{System.Int32},System.Double)
  name: ToDoublePowerOf
  nameWithType: LinqDataCalcExtensions.ToDoublePowerOf
  fullName: LinqDataCalc.LinqDataCalcExtensions.ToDoublePowerOf
- uid: LinqDataCalc.LinqDataCalcExtensions.TenPowerOf*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.TenPowerOf
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.TenPowerOf(System.Int32)
  name: TenPowerOf
  nameWithType: LinqDataCalcExtensions.TenPowerOf
  fullName: LinqDataCalc.LinqDataCalcExtensions.TenPowerOf
- uid: LinqDataCalc.LinqDataCalcExtensions.IterateAt*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.IterateAt
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.IterateAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: IterateAt
  nameWithType: LinqDataCalcExtensions.IterateAt
  fullName: LinqDataCalc.LinqDataCalcExtensions.IterateAt
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IEnumerable<T>>
  nameWithType: IEnumerable<IEnumerable<T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: IEnumerable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.ChunkOf*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.ChunkOf
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.ChunkOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: ChunkOf
  nameWithType: LinqDataCalcExtensions.ChunkOf
  fullName: LinqDataCalc.LinqDataCalcExtensions.ChunkOf
- uid: LinqDataCalc.LinqDataCalcExtensions.BTreeGen*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.BTreeGen
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.BTreeGen(System.Double,System.Int32)
  name: BTreeGen
  nameWithType: LinqDataCalcExtensions.BTreeGen
  fullName: LinqDataCalc.LinqDataCalcExtensions.BTreeGen
- uid: LinqDataCalc.LinqDataCalcExtensions.Node
  commentId: T:LinqDataCalc.LinqDataCalcExtensions.Node
  parent: LinqDataCalc
  href: LinqDataCalc.LinqDataCalcExtensions.html
  name: LinqDataCalcExtensions.Node
  nameWithType: LinqDataCalcExtensions.Node
  fullName: LinqDataCalc.LinqDataCalcExtensions.Node
  spec.csharp:
  - uid: LinqDataCalc.LinqDataCalcExtensions
    name: LinqDataCalcExtensions
    href: LinqDataCalc.LinqDataCalcExtensions.html
  - name: .
  - uid: LinqDataCalc.LinqDataCalcExtensions.Node
    name: Node
    href: LinqDataCalc.LinqDataCalcExtensions.Node.html
  spec.vb:
  - uid: LinqDataCalc.LinqDataCalcExtensions
    name: LinqDataCalcExtensions
    href: LinqDataCalc.LinqDataCalcExtensions.html
  - name: .
  - uid: LinqDataCalc.LinqDataCalcExtensions.Node
    name: Node
    href: LinqDataCalc.LinqDataCalcExtensions.Node.html
- uid: LinqDataCalc.LinqDataCalcExtensions.BTreeGen2*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.BTreeGen2
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.BTreeGen2(System.Int32,System.Double)
  name: BTreeGen2
  nameWithType: LinqDataCalcExtensions.BTreeGen2
  fullName: LinqDataCalc.LinqDataCalcExtensions.BTreeGen2
- uid: System.Collections.Generic.IEnumerable{LinqDataCalc.LinqDataCalcExtensions.Node}
  commentId: T:System.Collections.Generic.IEnumerable{LinqDataCalc.LinqDataCalcExtensions.Node}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<LinqDataCalcExtensions.Node>
  nameWithType: IEnumerable<LinqDataCalcExtensions.Node>
  fullName: System.Collections.Generic.IEnumerable<LinqDataCalc.LinqDataCalcExtensions.Node>
  nameWithType.vb: IEnumerable(Of LinqDataCalcExtensions.Node)
  fullName.vb: System.Collections.Generic.IEnumerable(Of LinqDataCalc.LinqDataCalcExtensions.Node)
  name.vb: IEnumerable(Of LinqDataCalcExtensions.Node)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: LinqDataCalc.LinqDataCalcExtensions
    name: LinqDataCalcExtensions
    href: LinqDataCalc.LinqDataCalcExtensions.html
  - name: .
  - uid: LinqDataCalc.LinqDataCalcExtensions.Node
    name: Node
    href: LinqDataCalc.LinqDataCalcExtensions.Node.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: LinqDataCalc.LinqDataCalcExtensions
    name: LinqDataCalcExtensions
    href: LinqDataCalc.LinqDataCalcExtensions.html
  - name: .
  - uid: LinqDataCalc.LinqDataCalcExtensions.Node
    name: Node
    href: LinqDataCalc.LinqDataCalcExtensions.Node.html
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.BTreeHeight*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.BTreeHeight
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.BTreeHeight(LinqDataCalc.LinqDataCalcExtensions.Node)
  name: BTreeHeight
  nameWithType: LinqDataCalcExtensions.BTreeHeight
  fullName: LinqDataCalc.LinqDataCalcExtensions.BTreeHeight
- uid: LinqDataCalc.LinqDataCalcExtensions.IEnumRndFill*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.IEnumRndFill
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.IEnumRndFill(System.Collections.Generic.IEnumerable{System.Int32},System.Object)
  name: IEnumRndFill
  nameWithType: LinqDataCalcExtensions.IEnumRndFill
  fullName: LinqDataCalc.LinqDataCalcExtensions.IEnumRndFill
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<object>
  nameWithType: IEnumerable<object>
  fullName: System.Collections.Generic.IEnumerable<object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.DictionaryRndFill*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.DictionaryRndFill
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.DictionaryRndFill(System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Int32,System.Int32}},System.Int32)
  name: DictionaryRndFill
  nameWithType: LinqDataCalcExtensions.DictionaryRndFill
  fullName: LinqDataCalc.LinqDataCalcExtensions.DictionaryRndFill
- uid: System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Int32,System.Int32}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Int32,System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, Tuple<int, int>>
  nameWithType: Dictionary<string, Tuple<int, int>>
  fullName: System.Collections.Generic.Dictionary<string, System.Tuple<int, int>>
  nameWithType.vb: Dictionary(Of String, Tuple(Of Integer, Integer))
  fullName.vb: System.Collections.Generic.Dictionary(Of String, System.Tuple(Of Integer, Integer))
  name.vb: Dictionary(Of String, Tuple(Of Integer, Integer))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.tuple-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.tuple-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Tuple{System.Int32,System.Int32}}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Tuple{System.Int32,System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<string, Tuple<int, int>>
  nameWithType: IDictionary<string, Tuple<int, int>>
  fullName: System.Collections.Generic.IDictionary<string, System.Tuple<int, int>>
  nameWithType.vb: IDictionary(Of String, Tuple(Of Integer, Integer))
  fullName.vb: System.Collections.Generic.IDictionary(Of String, System.Tuple(Of Integer, Integer))
  name.vb: IDictionary(Of String, Tuple(Of Integer, Integer))
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.tuple-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.tuple-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.RndIntTuple*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.RndIntTuple
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.RndIntTuple(System.Collections.Generic.IEnumerable{System.Int32})
  name: RndIntTuple
  nameWithType: LinqDataCalcExtensions.RndIntTuple
  fullName: LinqDataCalc.LinqDataCalcExtensions.RndIntTuple
- uid: System.Collections.Generic.IList{System.ValueTuple{System.Int32,System.String}}
  commentId: T:System.Collections.Generic.IList{System.ValueTuple{System.Int32,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<(int sample, string name)>
  nameWithType: IList<(int sample, string name)>
  fullName: System.Collections.Generic.IList<(int sample, string name)>
  nameWithType.vb: IList(Of (sample As Integer, name As String))
  fullName.vb: System.Collections.Generic.IList(Of (sample As Integer, name As String))
  name.vb: IList(Of (sample As Integer, name As String))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.String}.sample
    name: sample
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.string-.sample
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.String}.name
    name: name
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.string-.name
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Int32,System.String}.sample
    name: sample
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.string-.sample
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.String}.name
    name: name
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.string-.name
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.RndDoubleTuple*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.RndDoubleTuple
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.RndDoubleTuple(System.Collections.Generic.IEnumerable{System.Int32},System.Double)
  name: RndDoubleTuple
  nameWithType: LinqDataCalcExtensions.RndDoubleTuple
  fullName: LinqDataCalc.LinqDataCalcExtensions.RndDoubleTuple
- uid: System.Collections.Generic.IList{System.ValueTuple{System.Double,System.String}}
  commentId: T:System.Collections.Generic.IList{System.ValueTuple{System.Double,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<(double sample, string name)>
  nameWithType: IList<(double sample, string name)>
  fullName: System.Collections.Generic.IList<(double sample, string name)>
  nameWithType.vb: IList(Of (sample As Double, name As String))
  fullName.vb: System.Collections.Generic.IList(Of (sample As Double, name As String))
  name.vb: IList(Of (sample As Double, name As String))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: (
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: " "
  - uid: System.ValueTuple{System.Double,System.String}.sample
    name: sample
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.string-.sample
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{System.Double,System.String}.name
    name: name
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.string-.name
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Double,System.String}.sample
    name: sample
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.string-.sample
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Double,System.String}.name
    name: name
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.string-.name
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.AsNumberTuples*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.AsNumberTuples
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.AsNumberTuples(System.Collections.Generic.IEnumerable{System.Object})
  name: AsNumberTuples
  nameWithType: LinqDataCalcExtensions.AsNumberTuples
  fullName: LinqDataCalc.LinqDataCalcExtensions.AsNumberTuples
- uid: System.Collections.Generic.IList{System.Tuple{System.Int32,System.UInt64,System.Int64,System.Double,System.Decimal}}
  commentId: T:System.Collections.Generic.IList{System.Tuple{System.Int32,System.UInt64,System.Int64,System.Double,System.Decimal}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<Tuple<int, ulong, long, double, decimal>>
  nameWithType: IList<Tuple<int, ulong, long, double, decimal>>
  fullName: System.Collections.Generic.IList<System.Tuple<int, ulong, long, double, decimal>>
  nameWithType.vb: IList(Of Tuple(Of Integer, ULong, Long, Double, Decimal))
  fullName.vb: System.Collections.Generic.IList(Of System.Tuple(Of Integer, ULong, Long, Double, Decimal))
  name.vb: IList(Of Tuple(Of Integer, ULong, Long, Double, Decimal))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: System.Tuple`5
    name: Tuple
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.tuple-5
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`5
    name: Tuple
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.tuple-5
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: )
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.ToIntMatrix*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.ToIntMatrix
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.ToIntMatrix(System.String,System.Int32[0
  name: ToIntMatrix
  nameWithType: LinqDataCalcExtensions.ToIntMatrix
  fullName: LinqDataCalc.LinqDataCalcExtensions.ToIntMatrix
- uid: LinqDataCalc.LinqDataCalcExtensions.LevnDistEditMatrix*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.LevnDistEditMatrix
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.LevnDistEditMatrix(System.String,System.String)
  name: LevnDistEditMatrix
  nameWithType: LinqDataCalcExtensions.LevnDistEditMatrix
  fullName: LinqDataCalc.LinqDataCalcExtensions.LevnDistEditMatrix
- uid: System.Collections.Generic.IEnumerable{System.Int32[0:,0:]}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int32[0:,0:]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<int[,]>
  nameWithType: IEnumerable<int[,]>
  fullName: System.Collections.Generic.IEnumerable<int[,]>
  nameWithType.vb: IEnumerable(Of Integer(,))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Integer(,))
  name.vb: IEnumerable(Of Integer(,))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ','
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: ','
  - name: )
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose``1(``0[0
  name: MatrixTranspose
  nameWithType: LinqDataCalcExtensions.MatrixTranspose
  fullName: LinqDataCalc.LinqDataCalcExtensions.MatrixTranspose
- uid: '{T}[][]'
  isExternal: true
  name: T[][]
  nameWithType: T[][]
  fullName: T[][]
  nameWithType.vb: T()()
  fullName.vb: T()()
  name.vb: T()()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
  - name: (
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.VectorProduct*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.VectorProduct
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.VectorProduct(System.Int32[],System.Int32[])
  name: VectorProduct
  nameWithType: LinqDataCalcExtensions.VectorProduct
  fullName: LinqDataCalc.LinqDataCalcExtensions.VectorProduct
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.MatrixProductv2*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.MatrixProductv2
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.MatrixProductv2(System.Int32[0
  name: MatrixProductv2
  nameWithType: LinqDataCalcExtensions.MatrixProductv2
  fullName: LinqDataCalc.LinqDataCalcExtensions.MatrixProductv2
- uid: LinqDataCalc.LinqDataCalcExtensions.MatrixProduct*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.MatrixProduct
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.MatrixProduct(System.Int32[0
  name: MatrixProduct
  nameWithType: LinqDataCalcExtensions.MatrixProduct
  fullName: LinqDataCalc.LinqDataCalcExtensions.MatrixProduct
- uid: LinqDataCalc.LinqDataCalcExtensions.MaxMatrixVal*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.MaxMatrixVal
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.MaxMatrixVal(System.Int32[0
  name: MaxMatrixVal
  nameWithType: LinqDataCalcExtensions.MaxMatrixVal
  fullName: LinqDataCalc.LinqDataCalcExtensions.MaxMatrixVal
- uid: LinqDataCalc.LinqDataCalcExtensions.MaxMultiDimVal*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.MaxMultiDimVal
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.MaxMultiDimVal(System.Int32[][],System.Boolean)
  name: MaxMultiDimVal
  nameWithType: LinqDataCalcExtensions.MaxMultiDimVal
  fullName: LinqDataCalc.LinqDataCalcExtensions.MaxMultiDimVal
- uid: System.Int32[][]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[][]
  nameWithType: int[][]
  fullName: int[][]
  nameWithType.vb: Integer()()
  fullName.vb: Integer()()
  name.vb: Integer()()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: (
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.MaxCollVals*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.MaxCollVals
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.MaxCollVals(System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}},System.Boolean)
  name: MaxCollVals
  nameWithType: LinqDataCalcExtensions.MaxCollVals
  fullName: LinqDataCalc.LinqDataCalcExtensions.MaxCollVals
- uid: System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<List<int>>
  nameWithType: List<List<int>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.List<int>>
  nameWithType.vb: List(Of List(Of Integer))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.List(Of Integer))
  name.vb: List(Of List(Of Integer))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<int>
  nameWithType: List<int>
  fullName: System.Collections.Generic.List<int>
  nameWithType.vb: List(Of Integer)
  fullName.vb: System.Collections.Generic.List(Of Integer)
  name.vb: List(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.LetterCombinationsOf*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.LetterCombinationsOf
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.LetterCombinationsOf(System.String)
  name: LetterCombinationsOf
  nameWithType: LinqDataCalcExtensions.LetterCombinationsOf
  fullName: LinqDataCalc.LinqDataCalcExtensions.LetterCombinationsOf
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: LinqDataCalc.LinqDataCalcExtensions.GetRandomElements*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.GetRandomElements
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.GetRandomElements``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: GetRandomElements
  nameWithType: LinqDataCalcExtensions.GetRandomElements
  fullName: LinqDataCalc.LinqDataCalcExtensions.GetRandomElements
- uid: LinqDataCalc.LinqDataCalcExtensions.ReorderElements*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.ReorderElements
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.ReorderElements``1(System.Collections.Generic.IEnumerable{``0})
  name: ReorderElements
  nameWithType: LinqDataCalcExtensions.ReorderElements
  fullName: LinqDataCalc.LinqDataCalcExtensions.ReorderElements
- uid: LinqDataCalc.LinqDataCalcExtensions.ReorderElementsIterator*
  commentId: Overload:LinqDataCalc.LinqDataCalcExtensions.ReorderElementsIterator
  href: LinqDataCalc.LinqDataCalcExtensions.html#LinqDataCalc.LinqDataCalcExtensions.ReorderElementsIterator``1(System.Collections.Generic.IEnumerable{``0},System.Random)
  name: ReorderElementsIterator
  nameWithType: LinqDataCalcExtensions.ReorderElementsIterator
  fullName: LinqDataCalc.LinqDataCalcExtensions.ReorderElementsIterator
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.random
  name: Random
  nameWithType: Random
  fullName: System.Random
